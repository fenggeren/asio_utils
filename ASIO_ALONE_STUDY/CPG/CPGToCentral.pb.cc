// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CPGToCentral.proto

#include "CPGToCentral.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_CPGToCentral_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GateServerInfo_CPGToCentral_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CPGToCentral_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ServerInfo_CPGToCentral_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CPGToCentral_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ServiceMatchDistibuteNotify_CPGToCentral_2eproto;
namespace CPGToCentral {
class ServerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerInfo> _instance;
} _ServerInfo_default_instance_;
class ServerRegisterRQDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerRegisterRQ> _instance;
} _ServerRegisterRQ_default_instance_;
class ServerRegisterRSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerRegisterRS> _instance;
} _ServerRegisterRS_default_instance_;
class NewConnServiceNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NewConnServiceNotify> _instance;
} _NewConnServiceNotify_default_instance_;
class GateServerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GateServerInfo> _instance;
} _GateServerInfo_default_instance_;
class ServerLoginRQDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerLoginRQ> _instance;
} _ServerLoginRQ_default_instance_;
class ServerLoginRSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerLoginRS> _instance;
} _ServerLoginRS_default_instance_;
class ServiceMatchDistibuteNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServiceMatchDistibuteNotify> _instance;
} _ServiceMatchDistibuteNotify_default_instance_;
class ServerAllMatchDistributeNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerAllMatchDistributeNotify> _instance;
} _ServerAllMatchDistributeNotify_default_instance_;
class CheckMatchDistributeRQDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckMatchDistributeRQ> _instance;
} _CheckMatchDistributeRQ_default_instance_;
class CheckMatchDistributeRSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckMatchDistributeRS> _instance;
} _CheckMatchDistributeRS_default_instance_;
}  // namespace CPGToCentral
static void InitDefaultsServerInfo_CPGToCentral_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGToCentral::_ServerInfo_default_instance_;
    new (ptr) ::CPGToCentral::ServerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGToCentral::ServerInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServerInfo_CPGToCentral_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServerInfo_CPGToCentral_2eproto}, {}};

static void InitDefaultsServerRegisterRQ_CPGToCentral_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGToCentral::_ServerRegisterRQ_default_instance_;
    new (ptr) ::CPGToCentral::ServerRegisterRQ();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGToCentral::ServerRegisterRQ::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServerRegisterRQ_CPGToCentral_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServerRegisterRQ_CPGToCentral_2eproto}, {}};

static void InitDefaultsServerRegisterRS_CPGToCentral_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGToCentral::_ServerRegisterRS_default_instance_;
    new (ptr) ::CPGToCentral::ServerRegisterRS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGToCentral::ServerRegisterRS::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ServerRegisterRS_CPGToCentral_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsServerRegisterRS_CPGToCentral_2eproto}, {
      &scc_info_ServerInfo_CPGToCentral_2eproto.base,}};

static void InitDefaultsNewConnServiceNotify_CPGToCentral_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGToCentral::_NewConnServiceNotify_default_instance_;
    new (ptr) ::CPGToCentral::NewConnServiceNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGToCentral::NewConnServiceNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NewConnServiceNotify_CPGToCentral_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNewConnServiceNotify_CPGToCentral_2eproto}, {
      &scc_info_ServerInfo_CPGToCentral_2eproto.base,}};

static void InitDefaultsGateServerInfo_CPGToCentral_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGToCentral::_GateServerInfo_default_instance_;
    new (ptr) ::CPGToCentral::GateServerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGToCentral::GateServerInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GateServerInfo_CPGToCentral_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGateServerInfo_CPGToCentral_2eproto}, {}};

static void InitDefaultsServerLoginRQ_CPGToCentral_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGToCentral::_ServerLoginRQ_default_instance_;
    new (ptr) ::CPGToCentral::ServerLoginRQ();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGToCentral::ServerLoginRQ::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServerLoginRQ_CPGToCentral_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServerLoginRQ_CPGToCentral_2eproto}, {}};

static void InitDefaultsServerLoginRS_CPGToCentral_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGToCentral::_ServerLoginRS_default_instance_;
    new (ptr) ::CPGToCentral::ServerLoginRS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGToCentral::ServerLoginRS::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ServerLoginRS_CPGToCentral_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsServerLoginRS_CPGToCentral_2eproto}, {
      &scc_info_GateServerInfo_CPGToCentral_2eproto.base,}};

static void InitDefaultsServiceMatchDistibuteNotify_CPGToCentral_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGToCentral::_ServiceMatchDistibuteNotify_default_instance_;
    new (ptr) ::CPGToCentral::ServiceMatchDistibuteNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGToCentral::ServiceMatchDistibuteNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServiceMatchDistibuteNotify_CPGToCentral_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServiceMatchDistibuteNotify_CPGToCentral_2eproto}, {}};

static void InitDefaultsServerAllMatchDistributeNotify_CPGToCentral_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGToCentral::_ServerAllMatchDistributeNotify_default_instance_;
    new (ptr) ::CPGToCentral::ServerAllMatchDistributeNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGToCentral::ServerAllMatchDistributeNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ServerAllMatchDistributeNotify_CPGToCentral_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsServerAllMatchDistributeNotify_CPGToCentral_2eproto}, {
      &scc_info_ServiceMatchDistibuteNotify_CPGToCentral_2eproto.base,}};

static void InitDefaultsCheckMatchDistributeRQ_CPGToCentral_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGToCentral::_CheckMatchDistributeRQ_default_instance_;
    new (ptr) ::CPGToCentral::CheckMatchDistributeRQ();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGToCentral::CheckMatchDistributeRQ::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CheckMatchDistributeRQ_CPGToCentral_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCheckMatchDistributeRQ_CPGToCentral_2eproto}, {}};

static void InitDefaultsCheckMatchDistributeRS_CPGToCentral_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGToCentral::_CheckMatchDistributeRS_default_instance_;
    new (ptr) ::CPGToCentral::CheckMatchDistributeRS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGToCentral::CheckMatchDistributeRS::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CheckMatchDistributeRS_CPGToCentral_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCheckMatchDistributeRS_CPGToCentral_2eproto}, {}};

void InitDefaults_CPGToCentral_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ServerInfo_CPGToCentral_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerRegisterRQ_CPGToCentral_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerRegisterRS_CPGToCentral_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NewConnServiceNotify_CPGToCentral_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GateServerInfo_CPGToCentral_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerLoginRQ_CPGToCentral_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerLoginRS_CPGToCentral_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServiceMatchDistibuteNotify_CPGToCentral_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerAllMatchDistributeNotify_CPGToCentral_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CheckMatchDistributeRQ_CPGToCentral_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CheckMatchDistributeRS_CPGToCentral_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_CPGToCentral_2eproto[11];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_CPGToCentral_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_CPGToCentral_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_CPGToCentral_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServerInfo, type_),
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServerInfo, port_),
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServerInfo, sid_),
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServerInfo, ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServerRegisterRQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServerRegisterRQ, type_),
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServerRegisterRQ, port_),
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServerRegisterRQ, sid_),
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServerRegisterRQ, ip_),
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServerRegisterRQ, exportip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServerRegisterRS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServerRegisterRS, result_),
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServerRegisterRS, sid_),
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServerRegisterRS, connservers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::NewConnServiceNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::NewConnServiceNotify, connservers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::GateServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::GateServerInfo, port_),
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::GateServerInfo, sid_),
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::GateServerInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::GateServerInfo, exportip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServerLoginRQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServerLoginRQ, cid_),
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServerLoginRQ, sid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServerLoginRS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServerLoginRS, result_),
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServerLoginRS, cid_),
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServerLoginRS, gsinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServiceMatchDistibuteNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServiceMatchDistibuteNotify, sid_),
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServiceMatchDistibuteNotify, mid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServerAllMatchDistributeNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::ServerAllMatchDistributeNotify, services_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::CheckMatchDistributeRQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::CheckMatchDistributeRQ, sid_),
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::CheckMatchDistributeRQ, type_),
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::CheckMatchDistributeRQ, mids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::CheckMatchDistributeRS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::CheckMatchDistributeRS, sid_),
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::CheckMatchDistributeRS, type_),
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::CheckMatchDistributeRS, result_),
  PROTOBUF_FIELD_OFFSET(::CPGToCentral::CheckMatchDistributeRS, mids_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CPGToCentral::ServerInfo)},
  { 9, -1, sizeof(::CPGToCentral::ServerRegisterRQ)},
  { 19, -1, sizeof(::CPGToCentral::ServerRegisterRS)},
  { 27, -1, sizeof(::CPGToCentral::NewConnServiceNotify)},
  { 33, -1, sizeof(::CPGToCentral::GateServerInfo)},
  { 42, -1, sizeof(::CPGToCentral::ServerLoginRQ)},
  { 49, -1, sizeof(::CPGToCentral::ServerLoginRS)},
  { 57, -1, sizeof(::CPGToCentral::ServiceMatchDistibuteNotify)},
  { 64, -1, sizeof(::CPGToCentral::ServerAllMatchDistributeNotify)},
  { 70, -1, sizeof(::CPGToCentral::CheckMatchDistributeRQ)},
  { 78, -1, sizeof(::CPGToCentral::CheckMatchDistributeRS)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGToCentral::_ServerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGToCentral::_ServerRegisterRQ_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGToCentral::_ServerRegisterRS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGToCentral::_NewConnServiceNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGToCentral::_GateServerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGToCentral::_ServerLoginRQ_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGToCentral::_ServerLoginRS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGToCentral::_ServiceMatchDistibuteNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGToCentral::_ServerAllMatchDistributeNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGToCentral::_CheckMatchDistributeRQ_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGToCentral::_CheckMatchDistributeRS_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_CPGToCentral_2eproto = {
  {}, AddDescriptors_CPGToCentral_2eproto, "CPGToCentral.proto", schemas,
  file_default_instances, TableStruct_CPGToCentral_2eproto::offsets,
  file_level_metadata_CPGToCentral_2eproto, 11, file_level_enum_descriptors_CPGToCentral_2eproto, file_level_service_descriptors_CPGToCentral_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_CPGToCentral_2eproto = {
  false, InitDefaults_CPGToCentral_2eproto, 
  "\n\022CPGToCentral.proto\022\014CPGToCentral\"A\n\nSe"
  "rverInfo\022\014\n\004type\030\001 \001(\005\022\014\n\004port\030\002 \001(\005\022\013\n\003"
  "sid\030\003 \001(\005\022\n\n\002ip\030\004 \001(\t\"Y\n\020ServerRegisterR"
  "Q\022\014\n\004type\030\001 \001(\005\022\014\n\004port\030\002 \001(\005\022\013\n\003sid\030\003 \001"
  "(\005\022\n\n\002ip\030\004 \001(\t\022\020\n\010exportIP\030\005 \001(\t\"^\n\020Serv"
  "erRegisterRS\022\016\n\006result\030\001 \001(\005\022\013\n\003sid\030\002 \001("
  "\005\022-\n\013connServers\030\003 \003(\0132\030.CPGToCentral.Se"
  "rverInfo\"E\n\024NewConnServiceNotify\022-\n\013conn"
  "Servers\030\003 \003(\0132\030.CPGToCentral.ServerInfo\""
  "I\n\016GateServerInfo\022\014\n\004port\030\001 \001(\005\022\013\n\003sid\030\002"
  " \001(\005\022\n\n\002ip\030\003 \001(\t\022\020\n\010exportIP\030\004 \001(\t\")\n\rSe"
  "rverLoginRQ\022\013\n\003cid\030\001 \001(\005\022\013\n\003sid\030\002 \001(\005\"Z\n"
  "\rServerLoginRS\022\016\n\006result\030\001 \001(\005\022\013\n\003cid\030\002 "
  "\001(\005\022,\n\006gsinfo\030\003 \001(\0132\034.CPGToCentral.GateS"
  "erverInfo\"7\n\033ServiceMatchDistibuteNotify"
  "\022\013\n\003sid\030\001 \001(\005\022\013\n\003mid\030\002 \003(\005\"]\n\036ServerAllM"
  "atchDistributeNotify\022;\n\010services\030\001 \003(\0132)"
  ".CPGToCentral.ServiceMatchDistibuteNotif"
  "y\"A\n\026CheckMatchDistributeRQ\022\013\n\003sid\030\001 \001(\005"
  "\022\014\n\004type\030\002 \001(\005\022\014\n\004mids\030\003 \003(\005\"Q\n\026CheckMat"
  "chDistributeRS\022\013\n\003sid\030\001 \001(\005\022\014\n\004type\030\002 \001("
  "\005\022\016\n\006result\030\003 \001(\005\022\014\n\004mids\030\004 \003(\005b\006proto3"
,
  "CPGToCentral.proto", &assign_descriptors_table_CPGToCentral_2eproto, 879,
};

void AddDescriptors_CPGToCentral_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_CPGToCentral_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_CPGToCentral_2eproto = []() { AddDescriptors_CPGToCentral_2eproto(); return true; }();
namespace CPGToCentral {

// ===================================================================

void ServerInfo::InitAsDefaultInstance() {
}
class ServerInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerInfo::kTypeFieldNumber;
const int ServerInfo::kPortFieldNumber;
const int ServerInfo::kSidFieldNumber;
const int ServerInfo::kIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerInfo::ServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGToCentral.ServerInfo)
}
ServerInfo::ServerInfo(const ServerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&sid_) -
    reinterpret_cast<char*>(&type_)) + sizeof(sid_));
  // @@protoc_insertion_point(copy_constructor:CPGToCentral.ServerInfo)
}

void ServerInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ServerInfo_CPGToCentral_2eproto.base);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(sid_));
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:CPGToCentral.ServerInfo)
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerInfo& ServerInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ServerInfo_CPGToCentral_2eproto.base);
  return *internal_default_instance();
}


void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGToCentral.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(sid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ServerInfo*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_type(value);
        break;
      }
      // int32 port = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_port(value);
        break;
      }
      // int32 sid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_sid(value);
        break;
      }
      // string ip = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("CPGToCentral.ServerInfo.ip");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_ip();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGToCentral.ServerInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CPGToCentral.ServerInfo.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGToCentral.ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGToCentral.ServerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGToCentral.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // int32 sid = 3;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sid(), output);
  }

  // string ip = 4;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CPGToCentral.ServerInfo.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGToCentral.ServerInfo)
}

::google::protobuf::uint8* ServerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGToCentral.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // int32 sid = 3;
  if (this->sid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sid(), target);
  }

  // string ip = 4;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CPGToCentral.ServerInfo.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGToCentral.ServerInfo)
  return target;
}

size_t ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGToCentral.ServerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 4;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // int32 sid = 3;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGToCentral.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerInfo* source =
      ::google::protobuf::DynamicCastToGenerated<ServerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGToCentral.ServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGToCentral.ServerInfo)
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGToCentral.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.sid() != 0) {
    set_sid(from.sid());
  }
}

void ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGToCentral.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGToCentral.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerInfo::InternalSwap(ServerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(port_, other->port_);
  swap(sid_, other->sid_);
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGToCentral_2eproto);
  return ::file_level_metadata_CPGToCentral_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ServerRegisterRQ::InitAsDefaultInstance() {
}
class ServerRegisterRQ::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerRegisterRQ::kTypeFieldNumber;
const int ServerRegisterRQ::kPortFieldNumber;
const int ServerRegisterRQ::kSidFieldNumber;
const int ServerRegisterRQ::kIpFieldNumber;
const int ServerRegisterRQ::kExportIPFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerRegisterRQ::ServerRegisterRQ()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGToCentral.ServerRegisterRQ)
}
ServerRegisterRQ::ServerRegisterRQ(const ServerRegisterRQ& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  exportip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exportip().size() > 0) {
    exportip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exportip_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&sid_) -
    reinterpret_cast<char*>(&type_)) + sizeof(sid_));
  // @@protoc_insertion_point(copy_constructor:CPGToCentral.ServerRegisterRQ)
}

void ServerRegisterRQ::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ServerRegisterRQ_CPGToCentral_2eproto.base);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exportip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(sid_));
}

ServerRegisterRQ::~ServerRegisterRQ() {
  // @@protoc_insertion_point(destructor:CPGToCentral.ServerRegisterRQ)
  SharedDtor();
}

void ServerRegisterRQ::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exportip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerRegisterRQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerRegisterRQ& ServerRegisterRQ::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ServerRegisterRQ_CPGToCentral_2eproto.base);
  return *internal_default_instance();
}


void ServerRegisterRQ::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGToCentral.ServerRegisterRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exportip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(sid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerRegisterRQ::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ServerRegisterRQ*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_type(value);
        break;
      }
      // int32 port = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_port(value);
        break;
      }
      // int32 sid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_sid(value);
        break;
      }
      // string ip = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("CPGToCentral.ServerRegisterRQ.ip");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_ip();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // string exportIP = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("CPGToCentral.ServerRegisterRQ.exportIP");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_exportip();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerRegisterRQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGToCentral.ServerRegisterRQ)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CPGToCentral.ServerRegisterRQ.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exportIP = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exportip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exportip().data(), static_cast<int>(this->exportip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CPGToCentral.ServerRegisterRQ.exportIP"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGToCentral.ServerRegisterRQ)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGToCentral.ServerRegisterRQ)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerRegisterRQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGToCentral.ServerRegisterRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // int32 sid = 3;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sid(), output);
  }

  // string ip = 4;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CPGToCentral.ServerRegisterRQ.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ip(), output);
  }

  // string exportIP = 5;
  if (this->exportip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exportip().data(), static_cast<int>(this->exportip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CPGToCentral.ServerRegisterRQ.exportIP");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exportip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGToCentral.ServerRegisterRQ)
}

::google::protobuf::uint8* ServerRegisterRQ::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGToCentral.ServerRegisterRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // int32 sid = 3;
  if (this->sid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sid(), target);
  }

  // string ip = 4;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CPGToCentral.ServerRegisterRQ.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // string exportIP = 5;
  if (this->exportip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exportip().data(), static_cast<int>(this->exportip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CPGToCentral.ServerRegisterRQ.exportIP");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exportip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGToCentral.ServerRegisterRQ)
  return target;
}

size_t ServerRegisterRQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGToCentral.ServerRegisterRQ)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 4;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // string exportIP = 5;
  if (this->exportip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exportip());
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // int32 sid = 3;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerRegisterRQ::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGToCentral.ServerRegisterRQ)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerRegisterRQ* source =
      ::google::protobuf::DynamicCastToGenerated<ServerRegisterRQ>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGToCentral.ServerRegisterRQ)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGToCentral.ServerRegisterRQ)
    MergeFrom(*source);
  }
}

void ServerRegisterRQ::MergeFrom(const ServerRegisterRQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGToCentral.ServerRegisterRQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.exportip().size() > 0) {

    exportip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exportip_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.sid() != 0) {
    set_sid(from.sid());
  }
}

void ServerRegisterRQ::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGToCentral.ServerRegisterRQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerRegisterRQ::CopyFrom(const ServerRegisterRQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGToCentral.ServerRegisterRQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerRegisterRQ::IsInitialized() const {
  return true;
}

void ServerRegisterRQ::Swap(ServerRegisterRQ* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerRegisterRQ::InternalSwap(ServerRegisterRQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exportip_.Swap(&other->exportip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(port_, other->port_);
  swap(sid_, other->sid_);
}

::google::protobuf::Metadata ServerRegisterRQ::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGToCentral_2eproto);
  return ::file_level_metadata_CPGToCentral_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ServerRegisterRS::InitAsDefaultInstance() {
}
class ServerRegisterRS::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerRegisterRS::kResultFieldNumber;
const int ServerRegisterRS::kSidFieldNumber;
const int ServerRegisterRS::kConnServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerRegisterRS::ServerRegisterRS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGToCentral.ServerRegisterRS)
}
ServerRegisterRS::ServerRegisterRS(const ServerRegisterRS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      connservers_(from.connservers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&sid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(sid_));
  // @@protoc_insertion_point(copy_constructor:CPGToCentral.ServerRegisterRS)
}

void ServerRegisterRS::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ServerRegisterRS_CPGToCentral_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sid_) -
      reinterpret_cast<char*>(&result_)) + sizeof(sid_));
}

ServerRegisterRS::~ServerRegisterRS() {
  // @@protoc_insertion_point(destructor:CPGToCentral.ServerRegisterRS)
  SharedDtor();
}

void ServerRegisterRS::SharedDtor() {
}

void ServerRegisterRS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerRegisterRS& ServerRegisterRS::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ServerRegisterRS_CPGToCentral_2eproto.base);
  return *internal_default_instance();
}


void ServerRegisterRS::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGToCentral.ServerRegisterRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connservers_.Clear();
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sid_) -
      reinterpret_cast<char*>(&result_)) + sizeof(sid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerRegisterRS::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ServerRegisterRS*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_result(value);
        break;
      }
      // int32 sid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_sid(value);
        break;
      }
      // repeated .CPGToCentral.ServerInfo connServers = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::CPGToCentral::ServerInfo::_InternalParse;
          object = msg->add_connservers();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerRegisterRS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGToCentral.ServerRegisterRS)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CPGToCentral.ServerInfo connServers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_connservers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGToCentral.ServerRegisterRS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGToCentral.ServerRegisterRS)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerRegisterRS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGToCentral.ServerRegisterRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // int32 sid = 2;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }

  // repeated .CPGToCentral.ServerInfo connServers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connservers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->connservers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGToCentral.ServerRegisterRS)
}

::google::protobuf::uint8* ServerRegisterRS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGToCentral.ServerRegisterRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // int32 sid = 2;
  if (this->sid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }

  // repeated .CPGToCentral.ServerInfo connServers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connservers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->connservers(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGToCentral.ServerRegisterRS)
  return target;
}

size_t ServerRegisterRS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGToCentral.ServerRegisterRS)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPGToCentral.ServerInfo connServers = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->connservers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->connservers(static_cast<int>(i)));
    }
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  // int32 sid = 2;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerRegisterRS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGToCentral.ServerRegisterRS)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerRegisterRS* source =
      ::google::protobuf::DynamicCastToGenerated<ServerRegisterRS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGToCentral.ServerRegisterRS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGToCentral.ServerRegisterRS)
    MergeFrom(*source);
  }
}

void ServerRegisterRS::MergeFrom(const ServerRegisterRS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGToCentral.ServerRegisterRS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connservers_.MergeFrom(from.connservers_);
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.sid() != 0) {
    set_sid(from.sid());
  }
}

void ServerRegisterRS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGToCentral.ServerRegisterRS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerRegisterRS::CopyFrom(const ServerRegisterRS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGToCentral.ServerRegisterRS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerRegisterRS::IsInitialized() const {
  return true;
}

void ServerRegisterRS::Swap(ServerRegisterRS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerRegisterRS::InternalSwap(ServerRegisterRS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&connservers_)->InternalSwap(CastToBase(&other->connservers_));
  swap(result_, other->result_);
  swap(sid_, other->sid_);
}

::google::protobuf::Metadata ServerRegisterRS::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGToCentral_2eproto);
  return ::file_level_metadata_CPGToCentral_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NewConnServiceNotify::InitAsDefaultInstance() {
}
class NewConnServiceNotify::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewConnServiceNotify::kConnServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewConnServiceNotify::NewConnServiceNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGToCentral.NewConnServiceNotify)
}
NewConnServiceNotify::NewConnServiceNotify(const NewConnServiceNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      connservers_(from.connservers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPGToCentral.NewConnServiceNotify)
}

void NewConnServiceNotify::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NewConnServiceNotify_CPGToCentral_2eproto.base);
}

NewConnServiceNotify::~NewConnServiceNotify() {
  // @@protoc_insertion_point(destructor:CPGToCentral.NewConnServiceNotify)
  SharedDtor();
}

void NewConnServiceNotify::SharedDtor() {
}

void NewConnServiceNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewConnServiceNotify& NewConnServiceNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NewConnServiceNotify_CPGToCentral_2eproto.base);
  return *internal_default_instance();
}


void NewConnServiceNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGToCentral.NewConnServiceNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connservers_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NewConnServiceNotify::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NewConnServiceNotify*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .CPGToCentral.ServerInfo connServers = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::CPGToCentral::ServerInfo::_InternalParse;
          object = msg->add_connservers();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NewConnServiceNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGToCentral.NewConnServiceNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CPGToCentral.ServerInfo connServers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_connservers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGToCentral.NewConnServiceNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGToCentral.NewConnServiceNotify)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NewConnServiceNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGToCentral.NewConnServiceNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPGToCentral.ServerInfo connServers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connservers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->connservers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGToCentral.NewConnServiceNotify)
}

::google::protobuf::uint8* NewConnServiceNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGToCentral.NewConnServiceNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPGToCentral.ServerInfo connServers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connservers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->connservers(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGToCentral.NewConnServiceNotify)
  return target;
}

size_t NewConnServiceNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGToCentral.NewConnServiceNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPGToCentral.ServerInfo connServers = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->connservers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->connservers(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewConnServiceNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGToCentral.NewConnServiceNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const NewConnServiceNotify* source =
      ::google::protobuf::DynamicCastToGenerated<NewConnServiceNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGToCentral.NewConnServiceNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGToCentral.NewConnServiceNotify)
    MergeFrom(*source);
  }
}

void NewConnServiceNotify::MergeFrom(const NewConnServiceNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGToCentral.NewConnServiceNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connservers_.MergeFrom(from.connservers_);
}

void NewConnServiceNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGToCentral.NewConnServiceNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewConnServiceNotify::CopyFrom(const NewConnServiceNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGToCentral.NewConnServiceNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewConnServiceNotify::IsInitialized() const {
  return true;
}

void NewConnServiceNotify::Swap(NewConnServiceNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewConnServiceNotify::InternalSwap(NewConnServiceNotify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&connservers_)->InternalSwap(CastToBase(&other->connservers_));
}

::google::protobuf::Metadata NewConnServiceNotify::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGToCentral_2eproto);
  return ::file_level_metadata_CPGToCentral_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GateServerInfo::InitAsDefaultInstance() {
}
class GateServerInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GateServerInfo::kPortFieldNumber;
const int GateServerInfo::kSidFieldNumber;
const int GateServerInfo::kIpFieldNumber;
const int GateServerInfo::kExportIPFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GateServerInfo::GateServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGToCentral.GateServerInfo)
}
GateServerInfo::GateServerInfo(const GateServerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  exportip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exportip().size() > 0) {
    exportip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exportip_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&sid_) -
    reinterpret_cast<char*>(&port_)) + sizeof(sid_));
  // @@protoc_insertion_point(copy_constructor:CPGToCentral.GateServerInfo)
}

void GateServerInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GateServerInfo_CPGToCentral_2eproto.base);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exportip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sid_) -
      reinterpret_cast<char*>(&port_)) + sizeof(sid_));
}

GateServerInfo::~GateServerInfo() {
  // @@protoc_insertion_point(destructor:CPGToCentral.GateServerInfo)
  SharedDtor();
}

void GateServerInfo::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exportip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GateServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GateServerInfo& GateServerInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GateServerInfo_CPGToCentral_2eproto.base);
  return *internal_default_instance();
}


void GateServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGToCentral.GateServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exportip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sid_) -
      reinterpret_cast<char*>(&port_)) + sizeof(sid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GateServerInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GateServerInfo*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 port = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_port(value);
        break;
      }
      // int32 sid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_sid(value);
        break;
      }
      // string ip = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("CPGToCentral.GateServerInfo.ip");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_ip();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // string exportIP = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("CPGToCentral.GateServerInfo.exportIP");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_exportip();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GateServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGToCentral.GateServerInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CPGToCentral.GateServerInfo.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exportIP = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exportip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exportip().data(), static_cast<int>(this->exportip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CPGToCentral.GateServerInfo.exportIP"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGToCentral.GateServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGToCentral.GateServerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GateServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGToCentral.GateServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port = 1;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->port(), output);
  }

  // int32 sid = 2;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CPGToCentral.GateServerInfo.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // string exportIP = 4;
  if (this->exportip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exportip().data(), static_cast<int>(this->exportip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CPGToCentral.GateServerInfo.exportIP");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exportip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGToCentral.GateServerInfo)
}

::google::protobuf::uint8* GateServerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGToCentral.GateServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port = 1;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->port(), target);
  }

  // int32 sid = 2;
  if (this->sid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CPGToCentral.GateServerInfo.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // string exportIP = 4;
  if (this->exportip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exportip().data(), static_cast<int>(this->exportip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CPGToCentral.GateServerInfo.exportIP");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exportip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGToCentral.GateServerInfo)
  return target;
}

size_t GateServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGToCentral.GateServerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // string exportIP = 4;
  if (this->exportip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exportip());
  }

  // int32 port = 1;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // int32 sid = 2;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GateServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGToCentral.GateServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GateServerInfo* source =
      ::google::protobuf::DynamicCastToGenerated<GateServerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGToCentral.GateServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGToCentral.GateServerInfo)
    MergeFrom(*source);
  }
}

void GateServerInfo::MergeFrom(const GateServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGToCentral.GateServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.exportip().size() > 0) {

    exportip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exportip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.sid() != 0) {
    set_sid(from.sid());
  }
}

void GateServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGToCentral.GateServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateServerInfo::CopyFrom(const GateServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGToCentral.GateServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateServerInfo::IsInitialized() const {
  return true;
}

void GateServerInfo::Swap(GateServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateServerInfo::InternalSwap(GateServerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exportip_.Swap(&other->exportip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(sid_, other->sid_);
}

::google::protobuf::Metadata GateServerInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGToCentral_2eproto);
  return ::file_level_metadata_CPGToCentral_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ServerLoginRQ::InitAsDefaultInstance() {
}
class ServerLoginRQ::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerLoginRQ::kCidFieldNumber;
const int ServerLoginRQ::kSidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerLoginRQ::ServerLoginRQ()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGToCentral.ServerLoginRQ)
}
ServerLoginRQ::ServerLoginRQ(const ServerLoginRQ& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cid_, &from.cid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sid_) -
    reinterpret_cast<char*>(&cid_)) + sizeof(sid_));
  // @@protoc_insertion_point(copy_constructor:CPGToCentral.ServerLoginRQ)
}

void ServerLoginRQ::SharedCtor() {
  ::memset(&cid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sid_) -
      reinterpret_cast<char*>(&cid_)) + sizeof(sid_));
}

ServerLoginRQ::~ServerLoginRQ() {
  // @@protoc_insertion_point(destructor:CPGToCentral.ServerLoginRQ)
  SharedDtor();
}

void ServerLoginRQ::SharedDtor() {
}

void ServerLoginRQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerLoginRQ& ServerLoginRQ::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ServerLoginRQ_CPGToCentral_2eproto.base);
  return *internal_default_instance();
}


void ServerLoginRQ::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGToCentral.ServerLoginRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sid_) -
      reinterpret_cast<char*>(&cid_)) + sizeof(sid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerLoginRQ::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ServerLoginRQ*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 cid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_cid(value);
        break;
      }
      // int32 sid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_sid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerLoginRQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGToCentral.ServerLoginRQ)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 cid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGToCentral.ServerLoginRQ)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGToCentral.ServerLoginRQ)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerLoginRQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGToCentral.ServerLoginRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cid = 1;
  if (this->cid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cid(), output);
  }

  // int32 sid = 2;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGToCentral.ServerLoginRQ)
}

::google::protobuf::uint8* ServerLoginRQ::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGToCentral.ServerLoginRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cid = 1;
  if (this->cid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cid(), target);
  }

  // int32 sid = 2;
  if (this->sid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGToCentral.ServerLoginRQ)
  return target;
}

size_t ServerLoginRQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGToCentral.ServerLoginRQ)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cid = 1;
  if (this->cid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cid());
  }

  // int32 sid = 2;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerLoginRQ::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGToCentral.ServerLoginRQ)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerLoginRQ* source =
      ::google::protobuf::DynamicCastToGenerated<ServerLoginRQ>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGToCentral.ServerLoginRQ)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGToCentral.ServerLoginRQ)
    MergeFrom(*source);
  }
}

void ServerLoginRQ::MergeFrom(const ServerLoginRQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGToCentral.ServerLoginRQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cid() != 0) {
    set_cid(from.cid());
  }
  if (from.sid() != 0) {
    set_sid(from.sid());
  }
}

void ServerLoginRQ::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGToCentral.ServerLoginRQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerLoginRQ::CopyFrom(const ServerLoginRQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGToCentral.ServerLoginRQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerLoginRQ::IsInitialized() const {
  return true;
}

void ServerLoginRQ::Swap(ServerLoginRQ* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerLoginRQ::InternalSwap(ServerLoginRQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cid_, other->cid_);
  swap(sid_, other->sid_);
}

::google::protobuf::Metadata ServerLoginRQ::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGToCentral_2eproto);
  return ::file_level_metadata_CPGToCentral_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ServerLoginRS::InitAsDefaultInstance() {
  ::CPGToCentral::_ServerLoginRS_default_instance_._instance.get_mutable()->gsinfo_ = const_cast< ::CPGToCentral::GateServerInfo*>(
      ::CPGToCentral::GateServerInfo::internal_default_instance());
}
class ServerLoginRS::HasBitSetters {
 public:
  static const ::CPGToCentral::GateServerInfo& gsinfo(const ServerLoginRS* msg);
};

const ::CPGToCentral::GateServerInfo&
ServerLoginRS::HasBitSetters::gsinfo(const ServerLoginRS* msg) {
  return *msg->gsinfo_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerLoginRS::kResultFieldNumber;
const int ServerLoginRS::kCidFieldNumber;
const int ServerLoginRS::kGsinfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerLoginRS::ServerLoginRS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGToCentral.ServerLoginRS)
}
ServerLoginRS::ServerLoginRS(const ServerLoginRS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gsinfo()) {
    gsinfo_ = new ::CPGToCentral::GateServerInfo(*from.gsinfo_);
  } else {
    gsinfo_ = NULL;
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&cid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(cid_));
  // @@protoc_insertion_point(copy_constructor:CPGToCentral.ServerLoginRS)
}

void ServerLoginRS::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ServerLoginRS_CPGToCentral_2eproto.base);
  ::memset(&gsinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cid_) -
      reinterpret_cast<char*>(&gsinfo_)) + sizeof(cid_));
}

ServerLoginRS::~ServerLoginRS() {
  // @@protoc_insertion_point(destructor:CPGToCentral.ServerLoginRS)
  SharedDtor();
}

void ServerLoginRS::SharedDtor() {
  if (this != internal_default_instance()) delete gsinfo_;
}

void ServerLoginRS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerLoginRS& ServerLoginRS::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ServerLoginRS_CPGToCentral_2eproto.base);
  return *internal_default_instance();
}


void ServerLoginRS::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGToCentral.ServerLoginRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && gsinfo_ != NULL) {
    delete gsinfo_;
  }
  gsinfo_ = NULL;
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cid_) -
      reinterpret_cast<char*>(&result_)) + sizeof(cid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerLoginRS::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ServerLoginRS*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_result(value);
        break;
      }
      // int32 cid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_cid(value);
        break;
      }
      // .CPGToCentral.GateServerInfo gsinfo = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::CPGToCentral::GateServerInfo::_InternalParse;
        object = msg->mutable_gsinfo();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerLoginRS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGToCentral.ServerLoginRS)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CPGToCentral.GateServerInfo gsinfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gsinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGToCentral.ServerLoginRS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGToCentral.ServerLoginRS)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerLoginRS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGToCentral.ServerLoginRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // int32 cid = 2;
  if (this->cid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cid(), output);
  }

  // .CPGToCentral.GateServerInfo gsinfo = 3;
  if (this->has_gsinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::gsinfo(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGToCentral.ServerLoginRS)
}

::google::protobuf::uint8* ServerLoginRS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGToCentral.ServerLoginRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // int32 cid = 2;
  if (this->cid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cid(), target);
  }

  // .CPGToCentral.GateServerInfo gsinfo = 3;
  if (this->has_gsinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::gsinfo(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGToCentral.ServerLoginRS)
  return target;
}

size_t ServerLoginRS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGToCentral.ServerLoginRS)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CPGToCentral.GateServerInfo gsinfo = 3;
  if (this->has_gsinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gsinfo_);
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  // int32 cid = 2;
  if (this->cid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerLoginRS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGToCentral.ServerLoginRS)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerLoginRS* source =
      ::google::protobuf::DynamicCastToGenerated<ServerLoginRS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGToCentral.ServerLoginRS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGToCentral.ServerLoginRS)
    MergeFrom(*source);
  }
}

void ServerLoginRS::MergeFrom(const ServerLoginRS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGToCentral.ServerLoginRS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gsinfo()) {
    mutable_gsinfo()->::CPGToCentral::GateServerInfo::MergeFrom(from.gsinfo());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.cid() != 0) {
    set_cid(from.cid());
  }
}

void ServerLoginRS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGToCentral.ServerLoginRS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerLoginRS::CopyFrom(const ServerLoginRS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGToCentral.ServerLoginRS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerLoginRS::IsInitialized() const {
  return true;
}

void ServerLoginRS::Swap(ServerLoginRS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerLoginRS::InternalSwap(ServerLoginRS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gsinfo_, other->gsinfo_);
  swap(result_, other->result_);
  swap(cid_, other->cid_);
}

::google::protobuf::Metadata ServerLoginRS::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGToCentral_2eproto);
  return ::file_level_metadata_CPGToCentral_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ServiceMatchDistibuteNotify::InitAsDefaultInstance() {
}
class ServiceMatchDistibuteNotify::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceMatchDistibuteNotify::kSidFieldNumber;
const int ServiceMatchDistibuteNotify::kMidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceMatchDistibuteNotify::ServiceMatchDistibuteNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGToCentral.ServiceMatchDistibuteNotify)
}
ServiceMatchDistibuteNotify::ServiceMatchDistibuteNotify(const ServiceMatchDistibuteNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mid_(from.mid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sid_ = from.sid_;
  // @@protoc_insertion_point(copy_constructor:CPGToCentral.ServiceMatchDistibuteNotify)
}

void ServiceMatchDistibuteNotify::SharedCtor() {
  sid_ = 0;
}

ServiceMatchDistibuteNotify::~ServiceMatchDistibuteNotify() {
  // @@protoc_insertion_point(destructor:CPGToCentral.ServiceMatchDistibuteNotify)
  SharedDtor();
}

void ServiceMatchDistibuteNotify::SharedDtor() {
}

void ServiceMatchDistibuteNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceMatchDistibuteNotify& ServiceMatchDistibuteNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ServiceMatchDistibuteNotify_CPGToCentral_2eproto.base);
  return *internal_default_instance();
}


void ServiceMatchDistibuteNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGToCentral.ServiceMatchDistibuteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mid_.Clear();
  sid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServiceMatchDistibuteNotify::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ServiceMatchDistibuteNotify*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 sid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_sid(value);
        break;
      }
      // repeated int32 mid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_mid();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val;
          ptr = Varint::Parse64(ptr, &val);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ::google::protobuf::int32 value = val;
          msg->add_mid(value);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServiceMatchDistibuteNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGToCentral.ServiceMatchDistibuteNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 mid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_mid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGToCentral.ServiceMatchDistibuteNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGToCentral.ServiceMatchDistibuteNotify)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServiceMatchDistibuteNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGToCentral.ServiceMatchDistibuteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sid = 1;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }

  // repeated int32 mid = 2;
  if (this->mid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_mid_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->mid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->mid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGToCentral.ServiceMatchDistibuteNotify)
}

::google::protobuf::uint8* ServiceMatchDistibuteNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGToCentral.ServiceMatchDistibuteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sid = 1;
  if (this->sid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }

  // repeated int32 mid = 2;
  if (this->mid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _mid_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->mid_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGToCentral.ServiceMatchDistibuteNotify)
  return target;
}

size_t ServiceMatchDistibuteNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGToCentral.ServiceMatchDistibuteNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 mid = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->mid_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _mid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 sid = 1;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceMatchDistibuteNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGToCentral.ServiceMatchDistibuteNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceMatchDistibuteNotify* source =
      ::google::protobuf::DynamicCastToGenerated<ServiceMatchDistibuteNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGToCentral.ServiceMatchDistibuteNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGToCentral.ServiceMatchDistibuteNotify)
    MergeFrom(*source);
  }
}

void ServiceMatchDistibuteNotify::MergeFrom(const ServiceMatchDistibuteNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGToCentral.ServiceMatchDistibuteNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mid_.MergeFrom(from.mid_);
  if (from.sid() != 0) {
    set_sid(from.sid());
  }
}

void ServiceMatchDistibuteNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGToCentral.ServiceMatchDistibuteNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceMatchDistibuteNotify::CopyFrom(const ServiceMatchDistibuteNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGToCentral.ServiceMatchDistibuteNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceMatchDistibuteNotify::IsInitialized() const {
  return true;
}

void ServiceMatchDistibuteNotify::Swap(ServiceMatchDistibuteNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceMatchDistibuteNotify::InternalSwap(ServiceMatchDistibuteNotify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  mid_.InternalSwap(&other->mid_);
  swap(sid_, other->sid_);
}

::google::protobuf::Metadata ServiceMatchDistibuteNotify::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGToCentral_2eproto);
  return ::file_level_metadata_CPGToCentral_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ServerAllMatchDistributeNotify::InitAsDefaultInstance() {
}
class ServerAllMatchDistributeNotify::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerAllMatchDistributeNotify::kServicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerAllMatchDistributeNotify::ServerAllMatchDistributeNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGToCentral.ServerAllMatchDistributeNotify)
}
ServerAllMatchDistributeNotify::ServerAllMatchDistributeNotify(const ServerAllMatchDistributeNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      services_(from.services_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPGToCentral.ServerAllMatchDistributeNotify)
}

void ServerAllMatchDistributeNotify::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ServerAllMatchDistributeNotify_CPGToCentral_2eproto.base);
}

ServerAllMatchDistributeNotify::~ServerAllMatchDistributeNotify() {
  // @@protoc_insertion_point(destructor:CPGToCentral.ServerAllMatchDistributeNotify)
  SharedDtor();
}

void ServerAllMatchDistributeNotify::SharedDtor() {
}

void ServerAllMatchDistributeNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerAllMatchDistributeNotify& ServerAllMatchDistributeNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ServerAllMatchDistributeNotify_CPGToCentral_2eproto.base);
  return *internal_default_instance();
}


void ServerAllMatchDistributeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGToCentral.ServerAllMatchDistributeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  services_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerAllMatchDistributeNotify::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ServerAllMatchDistributeNotify*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .CPGToCentral.ServiceMatchDistibuteNotify services = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::CPGToCentral::ServiceMatchDistibuteNotify::_InternalParse;
          object = msg->add_services();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerAllMatchDistributeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGToCentral.ServerAllMatchDistributeNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CPGToCentral.ServiceMatchDistibuteNotify services = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_services()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGToCentral.ServerAllMatchDistributeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGToCentral.ServerAllMatchDistributeNotify)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerAllMatchDistributeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGToCentral.ServerAllMatchDistributeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPGToCentral.ServiceMatchDistibuteNotify services = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->services_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->services(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGToCentral.ServerAllMatchDistributeNotify)
}

::google::protobuf::uint8* ServerAllMatchDistributeNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGToCentral.ServerAllMatchDistributeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPGToCentral.ServiceMatchDistibuteNotify services = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->services_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->services(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGToCentral.ServerAllMatchDistributeNotify)
  return target;
}

size_t ServerAllMatchDistributeNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGToCentral.ServerAllMatchDistributeNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPGToCentral.ServiceMatchDistibuteNotify services = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->services_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->services(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerAllMatchDistributeNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGToCentral.ServerAllMatchDistributeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerAllMatchDistributeNotify* source =
      ::google::protobuf::DynamicCastToGenerated<ServerAllMatchDistributeNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGToCentral.ServerAllMatchDistributeNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGToCentral.ServerAllMatchDistributeNotify)
    MergeFrom(*source);
  }
}

void ServerAllMatchDistributeNotify::MergeFrom(const ServerAllMatchDistributeNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGToCentral.ServerAllMatchDistributeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  services_.MergeFrom(from.services_);
}

void ServerAllMatchDistributeNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGToCentral.ServerAllMatchDistributeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerAllMatchDistributeNotify::CopyFrom(const ServerAllMatchDistributeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGToCentral.ServerAllMatchDistributeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerAllMatchDistributeNotify::IsInitialized() const {
  return true;
}

void ServerAllMatchDistributeNotify::Swap(ServerAllMatchDistributeNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerAllMatchDistributeNotify::InternalSwap(ServerAllMatchDistributeNotify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&services_)->InternalSwap(CastToBase(&other->services_));
}

::google::protobuf::Metadata ServerAllMatchDistributeNotify::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGToCentral_2eproto);
  return ::file_level_metadata_CPGToCentral_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CheckMatchDistributeRQ::InitAsDefaultInstance() {
}
class CheckMatchDistributeRQ::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckMatchDistributeRQ::kSidFieldNumber;
const int CheckMatchDistributeRQ::kTypeFieldNumber;
const int CheckMatchDistributeRQ::kMidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckMatchDistributeRQ::CheckMatchDistributeRQ()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGToCentral.CheckMatchDistributeRQ)
}
CheckMatchDistributeRQ::CheckMatchDistributeRQ(const CheckMatchDistributeRQ& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mids_(from.mids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sid_, &from.sid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&sid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:CPGToCentral.CheckMatchDistributeRQ)
}

void CheckMatchDistributeRQ::SharedCtor() {
  ::memset(&sid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&sid_)) + sizeof(type_));
}

CheckMatchDistributeRQ::~CheckMatchDistributeRQ() {
  // @@protoc_insertion_point(destructor:CPGToCentral.CheckMatchDistributeRQ)
  SharedDtor();
}

void CheckMatchDistributeRQ::SharedDtor() {
}

void CheckMatchDistributeRQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckMatchDistributeRQ& CheckMatchDistributeRQ::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CheckMatchDistributeRQ_CPGToCentral_2eproto.base);
  return *internal_default_instance();
}


void CheckMatchDistributeRQ::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGToCentral.CheckMatchDistributeRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mids_.Clear();
  ::memset(&sid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&sid_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckMatchDistributeRQ::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CheckMatchDistributeRQ*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 sid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_sid(value);
        break;
      }
      // int32 type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_type(value);
        break;
      }
      // repeated int32 mids = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_mids();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val;
          ptr = Varint::Parse64(ptr, &val);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ::google::protobuf::int32 value = val;
          msg->add_mids(value);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckMatchDistributeRQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGToCentral.CheckMatchDistributeRQ)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 mids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_mids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGToCentral.CheckMatchDistributeRQ)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGToCentral.CheckMatchDistributeRQ)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckMatchDistributeRQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGToCentral.CheckMatchDistributeRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sid = 1;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated int32 mids = 3;
  if (this->mids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_mids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->mids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->mids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGToCentral.CheckMatchDistributeRQ)
}

::google::protobuf::uint8* CheckMatchDistributeRQ::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGToCentral.CheckMatchDistributeRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sid = 1;
  if (this->sid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // repeated int32 mids = 3;
  if (this->mids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _mids_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->mids_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGToCentral.CheckMatchDistributeRQ)
  return target;
}

size_t CheckMatchDistributeRQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGToCentral.CheckMatchDistributeRQ)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 mids = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->mids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _mids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 sid = 1;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckMatchDistributeRQ::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGToCentral.CheckMatchDistributeRQ)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckMatchDistributeRQ* source =
      ::google::protobuf::DynamicCastToGenerated<CheckMatchDistributeRQ>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGToCentral.CheckMatchDistributeRQ)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGToCentral.CheckMatchDistributeRQ)
    MergeFrom(*source);
  }
}

void CheckMatchDistributeRQ::MergeFrom(const CheckMatchDistributeRQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGToCentral.CheckMatchDistributeRQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mids_.MergeFrom(from.mids_);
  if (from.sid() != 0) {
    set_sid(from.sid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void CheckMatchDistributeRQ::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGToCentral.CheckMatchDistributeRQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckMatchDistributeRQ::CopyFrom(const CheckMatchDistributeRQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGToCentral.CheckMatchDistributeRQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckMatchDistributeRQ::IsInitialized() const {
  return true;
}

void CheckMatchDistributeRQ::Swap(CheckMatchDistributeRQ* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckMatchDistributeRQ::InternalSwap(CheckMatchDistributeRQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  mids_.InternalSwap(&other->mids_);
  swap(sid_, other->sid_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata CheckMatchDistributeRQ::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGToCentral_2eproto);
  return ::file_level_metadata_CPGToCentral_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CheckMatchDistributeRS::InitAsDefaultInstance() {
}
class CheckMatchDistributeRS::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckMatchDistributeRS::kSidFieldNumber;
const int CheckMatchDistributeRS::kTypeFieldNumber;
const int CheckMatchDistributeRS::kResultFieldNumber;
const int CheckMatchDistributeRS::kMidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckMatchDistributeRS::CheckMatchDistributeRS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGToCentral.CheckMatchDistributeRS)
}
CheckMatchDistributeRS::CheckMatchDistributeRS(const CheckMatchDistributeRS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mids_(from.mids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sid_, &from.sid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&sid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CPGToCentral.CheckMatchDistributeRS)
}

void CheckMatchDistributeRS::SharedCtor() {
  ::memset(&sid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&sid_)) + sizeof(result_));
}

CheckMatchDistributeRS::~CheckMatchDistributeRS() {
  // @@protoc_insertion_point(destructor:CPGToCentral.CheckMatchDistributeRS)
  SharedDtor();
}

void CheckMatchDistributeRS::SharedDtor() {
}

void CheckMatchDistributeRS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckMatchDistributeRS& CheckMatchDistributeRS::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CheckMatchDistributeRS_CPGToCentral_2eproto.base);
  return *internal_default_instance();
}


void CheckMatchDistributeRS::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGToCentral.CheckMatchDistributeRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mids_.Clear();
  ::memset(&sid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&sid_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckMatchDistributeRS::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CheckMatchDistributeRS*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 sid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_sid(value);
        break;
      }
      // int32 type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_type(value);
        break;
      }
      // int32 result = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_result(value);
        break;
      }
      // repeated int32 mids = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 34) {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_mids();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val;
          ptr = Varint::Parse64(ptr, &val);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ::google::protobuf::int32 value = val;
          msg->add_mids(value);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckMatchDistributeRS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGToCentral.CheckMatchDistributeRS)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 mids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_mids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGToCentral.CheckMatchDistributeRS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGToCentral.CheckMatchDistributeRS)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckMatchDistributeRS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGToCentral.CheckMatchDistributeRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sid = 1;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // int32 result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // repeated int32 mids = 4;
  if (this->mids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_mids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->mids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->mids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGToCentral.CheckMatchDistributeRS)
}

::google::protobuf::uint8* CheckMatchDistributeRS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGToCentral.CheckMatchDistributeRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sid = 1;
  if (this->sid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // int32 result = 3;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // repeated int32 mids = 4;
  if (this->mids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _mids_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->mids_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGToCentral.CheckMatchDistributeRS)
  return target;
}

size_t CheckMatchDistributeRS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGToCentral.CheckMatchDistributeRS)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 mids = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->mids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _mids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 sid = 1;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckMatchDistributeRS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGToCentral.CheckMatchDistributeRS)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckMatchDistributeRS* source =
      ::google::protobuf::DynamicCastToGenerated<CheckMatchDistributeRS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGToCentral.CheckMatchDistributeRS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGToCentral.CheckMatchDistributeRS)
    MergeFrom(*source);
  }
}

void CheckMatchDistributeRS::MergeFrom(const CheckMatchDistributeRS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGToCentral.CheckMatchDistributeRS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mids_.MergeFrom(from.mids_);
  if (from.sid() != 0) {
    set_sid(from.sid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void CheckMatchDistributeRS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGToCentral.CheckMatchDistributeRS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckMatchDistributeRS::CopyFrom(const CheckMatchDistributeRS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGToCentral.CheckMatchDistributeRS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckMatchDistributeRS::IsInitialized() const {
  return true;
}

void CheckMatchDistributeRS::Swap(CheckMatchDistributeRS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckMatchDistributeRS::InternalSwap(CheckMatchDistributeRS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  mids_.InternalSwap(&other->mids_);
  swap(sid_, other->sid_);
  swap(type_, other->type_);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CheckMatchDistributeRS::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGToCentral_2eproto);
  return ::file_level_metadata_CPGToCentral_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CPGToCentral
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::CPGToCentral::ServerInfo* Arena::CreateMaybeMessage< ::CPGToCentral::ServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::CPGToCentral::ServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGToCentral::ServerRegisterRQ* Arena::CreateMaybeMessage< ::CPGToCentral::ServerRegisterRQ >(Arena* arena) {
  return Arena::CreateInternal< ::CPGToCentral::ServerRegisterRQ >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGToCentral::ServerRegisterRS* Arena::CreateMaybeMessage< ::CPGToCentral::ServerRegisterRS >(Arena* arena) {
  return Arena::CreateInternal< ::CPGToCentral::ServerRegisterRS >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGToCentral::NewConnServiceNotify* Arena::CreateMaybeMessage< ::CPGToCentral::NewConnServiceNotify >(Arena* arena) {
  return Arena::CreateInternal< ::CPGToCentral::NewConnServiceNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGToCentral::GateServerInfo* Arena::CreateMaybeMessage< ::CPGToCentral::GateServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::CPGToCentral::GateServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGToCentral::ServerLoginRQ* Arena::CreateMaybeMessage< ::CPGToCentral::ServerLoginRQ >(Arena* arena) {
  return Arena::CreateInternal< ::CPGToCentral::ServerLoginRQ >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGToCentral::ServerLoginRS* Arena::CreateMaybeMessage< ::CPGToCentral::ServerLoginRS >(Arena* arena) {
  return Arena::CreateInternal< ::CPGToCentral::ServerLoginRS >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGToCentral::ServiceMatchDistibuteNotify* Arena::CreateMaybeMessage< ::CPGToCentral::ServiceMatchDistibuteNotify >(Arena* arena) {
  return Arena::CreateInternal< ::CPGToCentral::ServiceMatchDistibuteNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGToCentral::ServerAllMatchDistributeNotify* Arena::CreateMaybeMessage< ::CPGToCentral::ServerAllMatchDistributeNotify >(Arena* arena) {
  return Arena::CreateInternal< ::CPGToCentral::ServerAllMatchDistributeNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGToCentral::CheckMatchDistributeRQ* Arena::CreateMaybeMessage< ::CPGToCentral::CheckMatchDistributeRQ >(Arena* arena) {
  return Arena::CreateInternal< ::CPGToCentral::CheckMatchDistributeRQ >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGToCentral::CheckMatchDistributeRS* Arena::CreateMaybeMessage< ::CPGToCentral::CheckMatchDistributeRS >(Arena* arena) {
  return Arena::CreateInternal< ::CPGToCentral::CheckMatchDistributeRS >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
