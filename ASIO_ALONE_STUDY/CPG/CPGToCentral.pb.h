// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CPGToCentral.proto

#ifndef PROTOBUF_INCLUDED_CPGToCentral_2eproto
#define PROTOBUF_INCLUDED_CPGToCentral_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CPGToCentral_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_CPGToCentral_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_CPGToCentral_2eproto();
namespace CPGToCentral {
class GateServerInfo;
class GateServerInfoDefaultTypeInternal;
extern GateServerInfoDefaultTypeInternal _GateServerInfo_default_instance_;
class NewConnServiceNotify;
class NewConnServiceNotifyDefaultTypeInternal;
extern NewConnServiceNotifyDefaultTypeInternal _NewConnServiceNotify_default_instance_;
class ServerInfo;
class ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
class ServerLoginRQ;
class ServerLoginRQDefaultTypeInternal;
extern ServerLoginRQDefaultTypeInternal _ServerLoginRQ_default_instance_;
class ServerLoginRS;
class ServerLoginRSDefaultTypeInternal;
extern ServerLoginRSDefaultTypeInternal _ServerLoginRS_default_instance_;
class ServerRegisterRQ;
class ServerRegisterRQDefaultTypeInternal;
extern ServerRegisterRQDefaultTypeInternal _ServerRegisterRQ_default_instance_;
class ServerRegisterRS;
class ServerRegisterRSDefaultTypeInternal;
extern ServerRegisterRSDefaultTypeInternal _ServerRegisterRS_default_instance_;
}  // namespace CPGToCentral
namespace google {
namespace protobuf {
template<> ::CPGToCentral::GateServerInfo* Arena::CreateMaybeMessage<::CPGToCentral::GateServerInfo>(Arena*);
template<> ::CPGToCentral::NewConnServiceNotify* Arena::CreateMaybeMessage<::CPGToCentral::NewConnServiceNotify>(Arena*);
template<> ::CPGToCentral::ServerInfo* Arena::CreateMaybeMessage<::CPGToCentral::ServerInfo>(Arena*);
template<> ::CPGToCentral::ServerLoginRQ* Arena::CreateMaybeMessage<::CPGToCentral::ServerLoginRQ>(Arena*);
template<> ::CPGToCentral::ServerLoginRS* Arena::CreateMaybeMessage<::CPGToCentral::ServerLoginRS>(Arena*);
template<> ::CPGToCentral::ServerRegisterRQ* Arena::CreateMaybeMessage<::CPGToCentral::ServerRegisterRQ>(Arena*);
template<> ::CPGToCentral::ServerRegisterRS* Arena::CreateMaybeMessage<::CPGToCentral::ServerRegisterRS>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CPGToCentral {

// ===================================================================

class ServerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CPGToCentral.ServerInfo) */ {
 public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo& from);

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ServerInfo* other);
  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfo* New() const final {
    return CreateMaybeMessage<ServerInfo>(NULL);
  }

  ServerInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip = 4;
  void clear_ip();
  static const int kIpFieldNumber = 4;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // int32 sid = 3;
  void clear_sid();
  static const int kSidFieldNumber = 3;
  ::google::protobuf::int32 sid() const;
  void set_sid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CPGToCentral.ServerInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 sid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CPGToCentral_2eproto;
};
// -------------------------------------------------------------------

class ServerRegisterRQ : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CPGToCentral.ServerRegisterRQ) */ {
 public:
  ServerRegisterRQ();
  virtual ~ServerRegisterRQ();

  ServerRegisterRQ(const ServerRegisterRQ& from);

  inline ServerRegisterRQ& operator=(const ServerRegisterRQ& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerRegisterRQ(ServerRegisterRQ&& from) noexcept
    : ServerRegisterRQ() {
    *this = ::std::move(from);
  }

  inline ServerRegisterRQ& operator=(ServerRegisterRQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ServerRegisterRQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerRegisterRQ* internal_default_instance() {
    return reinterpret_cast<const ServerRegisterRQ*>(
               &_ServerRegisterRQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ServerRegisterRQ* other);
  friend void swap(ServerRegisterRQ& a, ServerRegisterRQ& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerRegisterRQ* New() const final {
    return CreateMaybeMessage<ServerRegisterRQ>(NULL);
  }

  ServerRegisterRQ* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerRegisterRQ>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerRegisterRQ& from);
  void MergeFrom(const ServerRegisterRQ& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerRegisterRQ* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip = 4;
  void clear_ip();
  static const int kIpFieldNumber = 4;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // string exportIP = 5;
  void clear_exportip();
  static const int kExportIPFieldNumber = 5;
  const ::std::string& exportip() const;
  void set_exportip(const ::std::string& value);
  #if LANG_CXX11
  void set_exportip(::std::string&& value);
  #endif
  void set_exportip(const char* value);
  void set_exportip(const char* value, size_t size);
  ::std::string* mutable_exportip();
  ::std::string* release_exportip();
  void set_allocated_exportip(::std::string* exportip);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // int32 sid = 3;
  void clear_sid();
  static const int kSidFieldNumber = 3;
  ::google::protobuf::int32 sid() const;
  void set_sid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CPGToCentral.ServerRegisterRQ)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr exportip_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 sid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CPGToCentral_2eproto;
};
// -------------------------------------------------------------------

class ServerRegisterRS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CPGToCentral.ServerRegisterRS) */ {
 public:
  ServerRegisterRS();
  virtual ~ServerRegisterRS();

  ServerRegisterRS(const ServerRegisterRS& from);

  inline ServerRegisterRS& operator=(const ServerRegisterRS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerRegisterRS(ServerRegisterRS&& from) noexcept
    : ServerRegisterRS() {
    *this = ::std::move(from);
  }

  inline ServerRegisterRS& operator=(ServerRegisterRS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ServerRegisterRS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerRegisterRS* internal_default_instance() {
    return reinterpret_cast<const ServerRegisterRS*>(
               &_ServerRegisterRS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ServerRegisterRS* other);
  friend void swap(ServerRegisterRS& a, ServerRegisterRS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerRegisterRS* New() const final {
    return CreateMaybeMessage<ServerRegisterRS>(NULL);
  }

  ServerRegisterRS* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerRegisterRS>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerRegisterRS& from);
  void MergeFrom(const ServerRegisterRS& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerRegisterRS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CPGToCentral.ServerInfo connServers = 3;
  int connservers_size() const;
  void clear_connservers();
  static const int kConnServersFieldNumber = 3;
  ::CPGToCentral::ServerInfo* mutable_connservers(int index);
  ::google::protobuf::RepeatedPtrField< ::CPGToCentral::ServerInfo >*
      mutable_connservers();
  const ::CPGToCentral::ServerInfo& connservers(int index) const;
  ::CPGToCentral::ServerInfo* add_connservers();
  const ::google::protobuf::RepeatedPtrField< ::CPGToCentral::ServerInfo >&
      connservers() const;

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // int32 sid = 2;
  void clear_sid();
  static const int kSidFieldNumber = 2;
  ::google::protobuf::int32 sid() const;
  void set_sid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CPGToCentral.ServerRegisterRS)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CPGToCentral::ServerInfo > connservers_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 sid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CPGToCentral_2eproto;
};
// -------------------------------------------------------------------

class NewConnServiceNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CPGToCentral.NewConnServiceNotify) */ {
 public:
  NewConnServiceNotify();
  virtual ~NewConnServiceNotify();

  NewConnServiceNotify(const NewConnServiceNotify& from);

  inline NewConnServiceNotify& operator=(const NewConnServiceNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewConnServiceNotify(NewConnServiceNotify&& from) noexcept
    : NewConnServiceNotify() {
    *this = ::std::move(from);
  }

  inline NewConnServiceNotify& operator=(NewConnServiceNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NewConnServiceNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewConnServiceNotify* internal_default_instance() {
    return reinterpret_cast<const NewConnServiceNotify*>(
               &_NewConnServiceNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(NewConnServiceNotify* other);
  friend void swap(NewConnServiceNotify& a, NewConnServiceNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewConnServiceNotify* New() const final {
    return CreateMaybeMessage<NewConnServiceNotify>(NULL);
  }

  NewConnServiceNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NewConnServiceNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NewConnServiceNotify& from);
  void MergeFrom(const NewConnServiceNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewConnServiceNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CPGToCentral.ServerInfo connServers = 3;
  int connservers_size() const;
  void clear_connservers();
  static const int kConnServersFieldNumber = 3;
  ::CPGToCentral::ServerInfo* mutable_connservers(int index);
  ::google::protobuf::RepeatedPtrField< ::CPGToCentral::ServerInfo >*
      mutable_connservers();
  const ::CPGToCentral::ServerInfo& connservers(int index) const;
  ::CPGToCentral::ServerInfo* add_connservers();
  const ::google::protobuf::RepeatedPtrField< ::CPGToCentral::ServerInfo >&
      connservers() const;

  // @@protoc_insertion_point(class_scope:CPGToCentral.NewConnServiceNotify)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CPGToCentral::ServerInfo > connservers_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CPGToCentral_2eproto;
};
// -------------------------------------------------------------------

class GateServerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CPGToCentral.GateServerInfo) */ {
 public:
  GateServerInfo();
  virtual ~GateServerInfo();

  GateServerInfo(const GateServerInfo& from);

  inline GateServerInfo& operator=(const GateServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GateServerInfo(GateServerInfo&& from) noexcept
    : GateServerInfo() {
    *this = ::std::move(from);
  }

  inline GateServerInfo& operator=(GateServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GateServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GateServerInfo* internal_default_instance() {
    return reinterpret_cast<const GateServerInfo*>(
               &_GateServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GateServerInfo* other);
  friend void swap(GateServerInfo& a, GateServerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GateServerInfo* New() const final {
    return CreateMaybeMessage<GateServerInfo>(NULL);
  }

  GateServerInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GateServerInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GateServerInfo& from);
  void MergeFrom(const GateServerInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GateServerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip = 3;
  void clear_ip();
  static const int kIpFieldNumber = 3;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // string exportIP = 4;
  void clear_exportip();
  static const int kExportIPFieldNumber = 4;
  const ::std::string& exportip() const;
  void set_exportip(const ::std::string& value);
  #if LANG_CXX11
  void set_exportip(::std::string&& value);
  #endif
  void set_exportip(const char* value);
  void set_exportip(const char* value, size_t size);
  ::std::string* mutable_exportip();
  ::std::string* release_exportip();
  void set_allocated_exportip(::std::string* exportip);

  // int32 port = 1;
  void clear_port();
  static const int kPortFieldNumber = 1;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // int32 sid = 2;
  void clear_sid();
  static const int kSidFieldNumber = 2;
  ::google::protobuf::int32 sid() const;
  void set_sid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CPGToCentral.GateServerInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr exportip_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 sid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CPGToCentral_2eproto;
};
// -------------------------------------------------------------------

class ServerLoginRQ : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CPGToCentral.ServerLoginRQ) */ {
 public:
  ServerLoginRQ();
  virtual ~ServerLoginRQ();

  ServerLoginRQ(const ServerLoginRQ& from);

  inline ServerLoginRQ& operator=(const ServerLoginRQ& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerLoginRQ(ServerLoginRQ&& from) noexcept
    : ServerLoginRQ() {
    *this = ::std::move(from);
  }

  inline ServerLoginRQ& operator=(ServerLoginRQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ServerLoginRQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerLoginRQ* internal_default_instance() {
    return reinterpret_cast<const ServerLoginRQ*>(
               &_ServerLoginRQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ServerLoginRQ* other);
  friend void swap(ServerLoginRQ& a, ServerLoginRQ& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerLoginRQ* New() const final {
    return CreateMaybeMessage<ServerLoginRQ>(NULL);
  }

  ServerLoginRQ* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerLoginRQ>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerLoginRQ& from);
  void MergeFrom(const ServerLoginRQ& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerLoginRQ* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 cid = 1;
  void clear_cid();
  static const int kCidFieldNumber = 1;
  ::google::protobuf::int32 cid() const;
  void set_cid(::google::protobuf::int32 value);

  // int32 sid = 2;
  void clear_sid();
  static const int kSidFieldNumber = 2;
  ::google::protobuf::int32 sid() const;
  void set_sid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CPGToCentral.ServerLoginRQ)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 cid_;
  ::google::protobuf::int32 sid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CPGToCentral_2eproto;
};
// -------------------------------------------------------------------

class ServerLoginRS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CPGToCentral.ServerLoginRS) */ {
 public:
  ServerLoginRS();
  virtual ~ServerLoginRS();

  ServerLoginRS(const ServerLoginRS& from);

  inline ServerLoginRS& operator=(const ServerLoginRS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerLoginRS(ServerLoginRS&& from) noexcept
    : ServerLoginRS() {
    *this = ::std::move(from);
  }

  inline ServerLoginRS& operator=(ServerLoginRS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ServerLoginRS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerLoginRS* internal_default_instance() {
    return reinterpret_cast<const ServerLoginRS*>(
               &_ServerLoginRS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ServerLoginRS* other);
  friend void swap(ServerLoginRS& a, ServerLoginRS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerLoginRS* New() const final {
    return CreateMaybeMessage<ServerLoginRS>(NULL);
  }

  ServerLoginRS* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerLoginRS>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerLoginRS& from);
  void MergeFrom(const ServerLoginRS& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerLoginRS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CPGToCentral.GateServerInfo gsinfo = 3;
  bool has_gsinfo() const;
  void clear_gsinfo();
  static const int kGsinfoFieldNumber = 3;
  const ::CPGToCentral::GateServerInfo& gsinfo() const;
  ::CPGToCentral::GateServerInfo* release_gsinfo();
  ::CPGToCentral::GateServerInfo* mutable_gsinfo();
  void set_allocated_gsinfo(::CPGToCentral::GateServerInfo* gsinfo);

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // int32 cid = 2;
  void clear_cid();
  static const int kCidFieldNumber = 2;
  ::google::protobuf::int32 cid() const;
  void set_cid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CPGToCentral.ServerLoginRS)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::CPGToCentral::GateServerInfo* gsinfo_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 cid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CPGToCentral_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerInfo

// int32 type = 1;
inline void ServerInfo::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 ServerInfo::type() const {
  // @@protoc_insertion_point(field_get:CPGToCentral.ServerInfo.type)
  return type_;
}
inline void ServerInfo::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:CPGToCentral.ServerInfo.type)
}

// int32 port = 2;
inline void ServerInfo::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 ServerInfo::port() const {
  // @@protoc_insertion_point(field_get:CPGToCentral.ServerInfo.port)
  return port_;
}
inline void ServerInfo::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:CPGToCentral.ServerInfo.port)
}

// int32 sid = 3;
inline void ServerInfo::clear_sid() {
  sid_ = 0;
}
inline ::google::protobuf::int32 ServerInfo::sid() const {
  // @@protoc_insertion_point(field_get:CPGToCentral.ServerInfo.sid)
  return sid_;
}
inline void ServerInfo::set_sid(::google::protobuf::int32 value) {
  
  sid_ = value;
  // @@protoc_insertion_point(field_set:CPGToCentral.ServerInfo.sid)
}

// string ip = 4;
inline void ServerInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfo::ip() const {
  // @@protoc_insertion_point(field_get:CPGToCentral.ServerInfo.ip)
  return ip_.GetNoArena();
}
inline void ServerInfo::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CPGToCentral.ServerInfo.ip)
}
#if LANG_CXX11
inline void ServerInfo::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CPGToCentral.ServerInfo.ip)
}
#endif
inline void ServerInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CPGToCentral.ServerInfo.ip)
}
inline void ServerInfo::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CPGToCentral.ServerInfo.ip)
}
inline ::std::string* ServerInfo::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:CPGToCentral.ServerInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfo::release_ip() {
  // @@protoc_insertion_point(field_release:CPGToCentral.ServerInfo.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:CPGToCentral.ServerInfo.ip)
}

// -------------------------------------------------------------------

// ServerRegisterRQ

// int32 type = 1;
inline void ServerRegisterRQ::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 ServerRegisterRQ::type() const {
  // @@protoc_insertion_point(field_get:CPGToCentral.ServerRegisterRQ.type)
  return type_;
}
inline void ServerRegisterRQ::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:CPGToCentral.ServerRegisterRQ.type)
}

// int32 port = 2;
inline void ServerRegisterRQ::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 ServerRegisterRQ::port() const {
  // @@protoc_insertion_point(field_get:CPGToCentral.ServerRegisterRQ.port)
  return port_;
}
inline void ServerRegisterRQ::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:CPGToCentral.ServerRegisterRQ.port)
}

// int32 sid = 3;
inline void ServerRegisterRQ::clear_sid() {
  sid_ = 0;
}
inline ::google::protobuf::int32 ServerRegisterRQ::sid() const {
  // @@protoc_insertion_point(field_get:CPGToCentral.ServerRegisterRQ.sid)
  return sid_;
}
inline void ServerRegisterRQ::set_sid(::google::protobuf::int32 value) {
  
  sid_ = value;
  // @@protoc_insertion_point(field_set:CPGToCentral.ServerRegisterRQ.sid)
}

// string ip = 4;
inline void ServerRegisterRQ::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerRegisterRQ::ip() const {
  // @@protoc_insertion_point(field_get:CPGToCentral.ServerRegisterRQ.ip)
  return ip_.GetNoArena();
}
inline void ServerRegisterRQ::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CPGToCentral.ServerRegisterRQ.ip)
}
#if LANG_CXX11
inline void ServerRegisterRQ::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CPGToCentral.ServerRegisterRQ.ip)
}
#endif
inline void ServerRegisterRQ::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CPGToCentral.ServerRegisterRQ.ip)
}
inline void ServerRegisterRQ::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CPGToCentral.ServerRegisterRQ.ip)
}
inline ::std::string* ServerRegisterRQ::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:CPGToCentral.ServerRegisterRQ.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerRegisterRQ::release_ip() {
  // @@protoc_insertion_point(field_release:CPGToCentral.ServerRegisterRQ.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerRegisterRQ::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:CPGToCentral.ServerRegisterRQ.ip)
}

// string exportIP = 5;
inline void ServerRegisterRQ::clear_exportip() {
  exportip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerRegisterRQ::exportip() const {
  // @@protoc_insertion_point(field_get:CPGToCentral.ServerRegisterRQ.exportIP)
  return exportip_.GetNoArena();
}
inline void ServerRegisterRQ::set_exportip(const ::std::string& value) {
  
  exportip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CPGToCentral.ServerRegisterRQ.exportIP)
}
#if LANG_CXX11
inline void ServerRegisterRQ::set_exportip(::std::string&& value) {
  
  exportip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CPGToCentral.ServerRegisterRQ.exportIP)
}
#endif
inline void ServerRegisterRQ::set_exportip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exportip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CPGToCentral.ServerRegisterRQ.exportIP)
}
inline void ServerRegisterRQ::set_exportip(const char* value, size_t size) {
  
  exportip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CPGToCentral.ServerRegisterRQ.exportIP)
}
inline ::std::string* ServerRegisterRQ::mutable_exportip() {
  
  // @@protoc_insertion_point(field_mutable:CPGToCentral.ServerRegisterRQ.exportIP)
  return exportip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerRegisterRQ::release_exportip() {
  // @@protoc_insertion_point(field_release:CPGToCentral.ServerRegisterRQ.exportIP)
  
  return exportip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerRegisterRQ::set_allocated_exportip(::std::string* exportip) {
  if (exportip != NULL) {
    
  } else {
    
  }
  exportip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exportip);
  // @@protoc_insertion_point(field_set_allocated:CPGToCentral.ServerRegisterRQ.exportIP)
}

// -------------------------------------------------------------------

// ServerRegisterRS

// int32 result = 1;
inline void ServerRegisterRS::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 ServerRegisterRS::result() const {
  // @@protoc_insertion_point(field_get:CPGToCentral.ServerRegisterRS.result)
  return result_;
}
inline void ServerRegisterRS::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:CPGToCentral.ServerRegisterRS.result)
}

// int32 sid = 2;
inline void ServerRegisterRS::clear_sid() {
  sid_ = 0;
}
inline ::google::protobuf::int32 ServerRegisterRS::sid() const {
  // @@protoc_insertion_point(field_get:CPGToCentral.ServerRegisterRS.sid)
  return sid_;
}
inline void ServerRegisterRS::set_sid(::google::protobuf::int32 value) {
  
  sid_ = value;
  // @@protoc_insertion_point(field_set:CPGToCentral.ServerRegisterRS.sid)
}

// repeated .CPGToCentral.ServerInfo connServers = 3;
inline int ServerRegisterRS::connservers_size() const {
  return connservers_.size();
}
inline void ServerRegisterRS::clear_connservers() {
  connservers_.Clear();
}
inline ::CPGToCentral::ServerInfo* ServerRegisterRS::mutable_connservers(int index) {
  // @@protoc_insertion_point(field_mutable:CPGToCentral.ServerRegisterRS.connServers)
  return connservers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CPGToCentral::ServerInfo >*
ServerRegisterRS::mutable_connservers() {
  // @@protoc_insertion_point(field_mutable_list:CPGToCentral.ServerRegisterRS.connServers)
  return &connservers_;
}
inline const ::CPGToCentral::ServerInfo& ServerRegisterRS::connservers(int index) const {
  // @@protoc_insertion_point(field_get:CPGToCentral.ServerRegisterRS.connServers)
  return connservers_.Get(index);
}
inline ::CPGToCentral::ServerInfo* ServerRegisterRS::add_connservers() {
  // @@protoc_insertion_point(field_add:CPGToCentral.ServerRegisterRS.connServers)
  return connservers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CPGToCentral::ServerInfo >&
ServerRegisterRS::connservers() const {
  // @@protoc_insertion_point(field_list:CPGToCentral.ServerRegisterRS.connServers)
  return connservers_;
}

// -------------------------------------------------------------------

// NewConnServiceNotify

// repeated .CPGToCentral.ServerInfo connServers = 3;
inline int NewConnServiceNotify::connservers_size() const {
  return connservers_.size();
}
inline void NewConnServiceNotify::clear_connservers() {
  connservers_.Clear();
}
inline ::CPGToCentral::ServerInfo* NewConnServiceNotify::mutable_connservers(int index) {
  // @@protoc_insertion_point(field_mutable:CPGToCentral.NewConnServiceNotify.connServers)
  return connservers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CPGToCentral::ServerInfo >*
NewConnServiceNotify::mutable_connservers() {
  // @@protoc_insertion_point(field_mutable_list:CPGToCentral.NewConnServiceNotify.connServers)
  return &connservers_;
}
inline const ::CPGToCentral::ServerInfo& NewConnServiceNotify::connservers(int index) const {
  // @@protoc_insertion_point(field_get:CPGToCentral.NewConnServiceNotify.connServers)
  return connservers_.Get(index);
}
inline ::CPGToCentral::ServerInfo* NewConnServiceNotify::add_connservers() {
  // @@protoc_insertion_point(field_add:CPGToCentral.NewConnServiceNotify.connServers)
  return connservers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CPGToCentral::ServerInfo >&
NewConnServiceNotify::connservers() const {
  // @@protoc_insertion_point(field_list:CPGToCentral.NewConnServiceNotify.connServers)
  return connservers_;
}

// -------------------------------------------------------------------

// GateServerInfo

// int32 port = 1;
inline void GateServerInfo::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 GateServerInfo::port() const {
  // @@protoc_insertion_point(field_get:CPGToCentral.GateServerInfo.port)
  return port_;
}
inline void GateServerInfo::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:CPGToCentral.GateServerInfo.port)
}

// int32 sid = 2;
inline void GateServerInfo::clear_sid() {
  sid_ = 0;
}
inline ::google::protobuf::int32 GateServerInfo::sid() const {
  // @@protoc_insertion_point(field_get:CPGToCentral.GateServerInfo.sid)
  return sid_;
}
inline void GateServerInfo::set_sid(::google::protobuf::int32 value) {
  
  sid_ = value;
  // @@protoc_insertion_point(field_set:CPGToCentral.GateServerInfo.sid)
}

// string ip = 3;
inline void GateServerInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateServerInfo::ip() const {
  // @@protoc_insertion_point(field_get:CPGToCentral.GateServerInfo.ip)
  return ip_.GetNoArena();
}
inline void GateServerInfo::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CPGToCentral.GateServerInfo.ip)
}
#if LANG_CXX11
inline void GateServerInfo::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CPGToCentral.GateServerInfo.ip)
}
#endif
inline void GateServerInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CPGToCentral.GateServerInfo.ip)
}
inline void GateServerInfo::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CPGToCentral.GateServerInfo.ip)
}
inline ::std::string* GateServerInfo::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:CPGToCentral.GateServerInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateServerInfo::release_ip() {
  // @@protoc_insertion_point(field_release:CPGToCentral.GateServerInfo.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateServerInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:CPGToCentral.GateServerInfo.ip)
}

// string exportIP = 4;
inline void GateServerInfo::clear_exportip() {
  exportip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateServerInfo::exportip() const {
  // @@protoc_insertion_point(field_get:CPGToCentral.GateServerInfo.exportIP)
  return exportip_.GetNoArena();
}
inline void GateServerInfo::set_exportip(const ::std::string& value) {
  
  exportip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CPGToCentral.GateServerInfo.exportIP)
}
#if LANG_CXX11
inline void GateServerInfo::set_exportip(::std::string&& value) {
  
  exportip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CPGToCentral.GateServerInfo.exportIP)
}
#endif
inline void GateServerInfo::set_exportip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exportip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CPGToCentral.GateServerInfo.exportIP)
}
inline void GateServerInfo::set_exportip(const char* value, size_t size) {
  
  exportip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CPGToCentral.GateServerInfo.exportIP)
}
inline ::std::string* GateServerInfo::mutable_exportip() {
  
  // @@protoc_insertion_point(field_mutable:CPGToCentral.GateServerInfo.exportIP)
  return exportip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateServerInfo::release_exportip() {
  // @@protoc_insertion_point(field_release:CPGToCentral.GateServerInfo.exportIP)
  
  return exportip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateServerInfo::set_allocated_exportip(::std::string* exportip) {
  if (exportip != NULL) {
    
  } else {
    
  }
  exportip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exportip);
  // @@protoc_insertion_point(field_set_allocated:CPGToCentral.GateServerInfo.exportIP)
}

// -------------------------------------------------------------------

// ServerLoginRQ

// int32 cid = 1;
inline void ServerLoginRQ::clear_cid() {
  cid_ = 0;
}
inline ::google::protobuf::int32 ServerLoginRQ::cid() const {
  // @@protoc_insertion_point(field_get:CPGToCentral.ServerLoginRQ.cid)
  return cid_;
}
inline void ServerLoginRQ::set_cid(::google::protobuf::int32 value) {
  
  cid_ = value;
  // @@protoc_insertion_point(field_set:CPGToCentral.ServerLoginRQ.cid)
}

// int32 sid = 2;
inline void ServerLoginRQ::clear_sid() {
  sid_ = 0;
}
inline ::google::protobuf::int32 ServerLoginRQ::sid() const {
  // @@protoc_insertion_point(field_get:CPGToCentral.ServerLoginRQ.sid)
  return sid_;
}
inline void ServerLoginRQ::set_sid(::google::protobuf::int32 value) {
  
  sid_ = value;
  // @@protoc_insertion_point(field_set:CPGToCentral.ServerLoginRQ.sid)
}

// -------------------------------------------------------------------

// ServerLoginRS

// int32 result = 1;
inline void ServerLoginRS::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 ServerLoginRS::result() const {
  // @@protoc_insertion_point(field_get:CPGToCentral.ServerLoginRS.result)
  return result_;
}
inline void ServerLoginRS::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:CPGToCentral.ServerLoginRS.result)
}

// int32 cid = 2;
inline void ServerLoginRS::clear_cid() {
  cid_ = 0;
}
inline ::google::protobuf::int32 ServerLoginRS::cid() const {
  // @@protoc_insertion_point(field_get:CPGToCentral.ServerLoginRS.cid)
  return cid_;
}
inline void ServerLoginRS::set_cid(::google::protobuf::int32 value) {
  
  cid_ = value;
  // @@protoc_insertion_point(field_set:CPGToCentral.ServerLoginRS.cid)
}

// .CPGToCentral.GateServerInfo gsinfo = 3;
inline bool ServerLoginRS::has_gsinfo() const {
  return this != internal_default_instance() && gsinfo_ != NULL;
}
inline void ServerLoginRS::clear_gsinfo() {
  if (GetArenaNoVirtual() == NULL && gsinfo_ != NULL) {
    delete gsinfo_;
  }
  gsinfo_ = NULL;
}
inline const ::CPGToCentral::GateServerInfo& ServerLoginRS::gsinfo() const {
  const ::CPGToCentral::GateServerInfo* p = gsinfo_;
  // @@protoc_insertion_point(field_get:CPGToCentral.ServerLoginRS.gsinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::CPGToCentral::GateServerInfo*>(
      &::CPGToCentral::_GateServerInfo_default_instance_);
}
inline ::CPGToCentral::GateServerInfo* ServerLoginRS::release_gsinfo() {
  // @@protoc_insertion_point(field_release:CPGToCentral.ServerLoginRS.gsinfo)
  
  ::CPGToCentral::GateServerInfo* temp = gsinfo_;
  gsinfo_ = NULL;
  return temp;
}
inline ::CPGToCentral::GateServerInfo* ServerLoginRS::mutable_gsinfo() {
  
  if (gsinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::CPGToCentral::GateServerInfo>(GetArenaNoVirtual());
    gsinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CPGToCentral.ServerLoginRS.gsinfo)
  return gsinfo_;
}
inline void ServerLoginRS::set_allocated_gsinfo(::CPGToCentral::GateServerInfo* gsinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gsinfo_;
  }
  if (gsinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gsinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gsinfo, submessage_arena);
    }
    
  } else {
    
  }
  gsinfo_ = gsinfo;
  // @@protoc_insertion_point(field_set_allocated:CPGToCentral.ServerLoginRS.gsinfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CPGToCentral

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_CPGToCentral_2eproto
