// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CPGClient.proto

#include "CPGClient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace CPGClient {
class ConnectGateRQDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConnectGateRQ> _instance;
} _ConnectGateRQ_default_instance_;
class ConnectGateRSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConnectGateRS> _instance;
} _ConnectGateRS_default_instance_;
class LoginRSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginRS> _instance;
} _LoginRS_default_instance_;
class LoginRQDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginRQ> _instance;
} _LoginRQ_default_instance_;
}  // namespace CPGClient
static void InitDefaultsConnectGateRQ_CPGClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGClient::_ConnectGateRQ_default_instance_;
    new (ptr) ::CPGClient::ConnectGateRQ();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGClient::ConnectGateRQ::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConnectGateRQ_CPGClient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConnectGateRQ_CPGClient_2eproto}, {}};

static void InitDefaultsConnectGateRS_CPGClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGClient::_ConnectGateRS_default_instance_;
    new (ptr) ::CPGClient::ConnectGateRS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGClient::ConnectGateRS::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConnectGateRS_CPGClient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConnectGateRS_CPGClient_2eproto}, {}};

static void InitDefaultsLoginRS_CPGClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGClient::_LoginRS_default_instance_;
    new (ptr) ::CPGClient::LoginRS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGClient::LoginRS::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LoginRS_CPGClient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLoginRS_CPGClient_2eproto}, {}};

static void InitDefaultsLoginRQ_CPGClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGClient::_LoginRQ_default_instance_;
    new (ptr) ::CPGClient::LoginRQ();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGClient::LoginRQ::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LoginRQ_CPGClient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLoginRQ_CPGClient_2eproto}, {}};

void InitDefaults_CPGClient_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ConnectGateRQ_CPGClient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConnectGateRS_CPGClient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LoginRS_CPGClient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LoginRQ_CPGClient_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_CPGClient_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_CPGClient_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_CPGClient_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_CPGClient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGClient::ConnectGateRQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGClient::ConnectGateRS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGClient::ConnectGateRS, result_),
  PROTOBUF_FIELD_OFFSET(::CPGClient::ConnectGateRS, port_),
  PROTOBUF_FIELD_OFFSET(::CPGClient::ConnectGateRS, ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGClient::LoginRS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGClient::LoginRS, uid_),
  PROTOBUF_FIELD_OFFSET(::CPGClient::LoginRS, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGClient::LoginRQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGClient::LoginRQ, result_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CPGClient::ConnectGateRQ)},
  { 5, -1, sizeof(::CPGClient::ConnectGateRS)},
  { 13, -1, sizeof(::CPGClient::LoginRS)},
  { 20, -1, sizeof(::CPGClient::LoginRQ)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGClient::_ConnectGateRQ_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGClient::_ConnectGateRS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGClient::_LoginRS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGClient::_LoginRQ_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_CPGClient_2eproto = {
  {}, AddDescriptors_CPGClient_2eproto, "CPGClient.proto", schemas,
  file_default_instances, TableStruct_CPGClient_2eproto::offsets,
  file_level_metadata_CPGClient_2eproto, 4, file_level_enum_descriptors_CPGClient_2eproto, file_level_service_descriptors_CPGClient_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_CPGClient_2eproto = {
  false, InitDefaults_CPGClient_2eproto, 
  "\n\017CPGClient.proto\022\tCPGClient\"\017\n\rConnectG"
  "ateRQ\"9\n\rConnectGateRS\022\016\n\006result\030\001 \001(\005\022\014"
  "\n\004port\030\002 \001(\005\022\n\n\002ip\030\003 \001(\t\"%\n\007LoginRS\022\013\n\003u"
  "id\030\001 \001(\005\022\r\n\005token\030\002 \001(\t\"\031\n\007LoginRQ\022\016\n\006re"
  "sult\030\001 \001(\005b\006proto3"
,
  "CPGClient.proto", &assign_descriptors_table_CPGClient_2eproto, 178,
};

void AddDescriptors_CPGClient_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_CPGClient_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_CPGClient_2eproto = []() { AddDescriptors_CPGClient_2eproto(); return true; }();
namespace CPGClient {

// ===================================================================

void ConnectGateRQ::InitAsDefaultInstance() {
}
class ConnectGateRQ::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectGateRQ::ConnectGateRQ()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGClient.ConnectGateRQ)
}
ConnectGateRQ::ConnectGateRQ(const ConnectGateRQ& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPGClient.ConnectGateRQ)
}

void ConnectGateRQ::SharedCtor() {
}

ConnectGateRQ::~ConnectGateRQ() {
  // @@protoc_insertion_point(destructor:CPGClient.ConnectGateRQ)
  SharedDtor();
}

void ConnectGateRQ::SharedDtor() {
}

void ConnectGateRQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectGateRQ& ConnectGateRQ::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConnectGateRQ_CPGClient_2eproto.base);
  return *internal_default_instance();
}


void ConnectGateRQ::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGClient.ConnectGateRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConnectGateRQ::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConnectGateRQ*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConnectGateRQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGClient.ConnectGateRQ)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CPGClient.ConnectGateRQ)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGClient.ConnectGateRQ)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConnectGateRQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGClient.ConnectGateRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGClient.ConnectGateRQ)
}

::google::protobuf::uint8* ConnectGateRQ::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGClient.ConnectGateRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGClient.ConnectGateRQ)
  return target;
}

size_t ConnectGateRQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGClient.ConnectGateRQ)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectGateRQ::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGClient.ConnectGateRQ)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectGateRQ* source =
      ::google::protobuf::DynamicCastToGenerated<ConnectGateRQ>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGClient.ConnectGateRQ)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGClient.ConnectGateRQ)
    MergeFrom(*source);
  }
}

void ConnectGateRQ::MergeFrom(const ConnectGateRQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGClient.ConnectGateRQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ConnectGateRQ::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGClient.ConnectGateRQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectGateRQ::CopyFrom(const ConnectGateRQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGClient.ConnectGateRQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectGateRQ::IsInitialized() const {
  return true;
}

void ConnectGateRQ::Swap(ConnectGateRQ* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectGateRQ::InternalSwap(ConnectGateRQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConnectGateRQ::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGClient_2eproto);
  return ::file_level_metadata_CPGClient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ConnectGateRS::InitAsDefaultInstance() {
}
class ConnectGateRS::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectGateRS::kResultFieldNumber;
const int ConnectGateRS::kPortFieldNumber;
const int ConnectGateRS::kIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectGateRS::ConnectGateRS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGClient.ConnectGateRS)
}
ConnectGateRS::ConnectGateRS(const ConnectGateRS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&result_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:CPGClient.ConnectGateRS)
}

void ConnectGateRS::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ConnectGateRS_CPGClient_2eproto.base);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&result_)) + sizeof(port_));
}

ConnectGateRS::~ConnectGateRS() {
  // @@protoc_insertion_point(destructor:CPGClient.ConnectGateRS)
  SharedDtor();
}

void ConnectGateRS::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConnectGateRS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectGateRS& ConnectGateRS::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConnectGateRS_CPGClient_2eproto.base);
  return *internal_default_instance();
}


void ConnectGateRS::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGClient.ConnectGateRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&result_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConnectGateRS::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConnectGateRS*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_result(value);
        break;
      }
      // int32 port = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_port(value);
        break;
      }
      // string ip = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("CPGClient.ConnectGateRS.ip");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_ip();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConnectGateRS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGClient.ConnectGateRS)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CPGClient.ConnectGateRS.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGClient.ConnectGateRS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGClient.ConnectGateRS)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConnectGateRS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGClient.ConnectGateRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CPGClient.ConnectGateRS.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGClient.ConnectGateRS)
}

::google::protobuf::uint8* ConnectGateRS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGClient.ConnectGateRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CPGClient.ConnectGateRS.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGClient.ConnectGateRS)
  return target;
}

size_t ConnectGateRS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGClient.ConnectGateRS)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectGateRS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGClient.ConnectGateRS)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectGateRS* source =
      ::google::protobuf::DynamicCastToGenerated<ConnectGateRS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGClient.ConnectGateRS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGClient.ConnectGateRS)
    MergeFrom(*source);
  }
}

void ConnectGateRS::MergeFrom(const ConnectGateRS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGClient.ConnectGateRS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void ConnectGateRS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGClient.ConnectGateRS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectGateRS::CopyFrom(const ConnectGateRS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGClient.ConnectGateRS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectGateRS::IsInitialized() const {
  return true;
}

void ConnectGateRS::Swap(ConnectGateRS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectGateRS::InternalSwap(ConnectGateRS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
  swap(port_, other->port_);
}

::google::protobuf::Metadata ConnectGateRS::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGClient_2eproto);
  return ::file_level_metadata_CPGClient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LoginRS::InitAsDefaultInstance() {
}
class LoginRS::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRS::kUidFieldNumber;
const int LoginRS::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRS::LoginRS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGClient.LoginRS)
}
LoginRS::LoginRS(const LoginRS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:CPGClient.LoginRS)
}

void LoginRS::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LoginRS_CPGClient_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = 0;
}

LoginRS::~LoginRS() {
  // @@protoc_insertion_point(destructor:CPGClient.LoginRS)
  SharedDtor();
}

void LoginRS::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginRS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginRS& LoginRS::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LoginRS_CPGClient_2eproto.base);
  return *internal_default_instance();
}


void LoginRS::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGClient.LoginRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoginRS::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LoginRS*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_uid(value);
        break;
      }
      // string token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("CPGClient.LoginRS.token");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_token();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoginRS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGClient.LoginRS)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CPGClient.LoginRS.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGClient.LoginRS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGClient.LoginRS)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoginRS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGClient.LoginRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CPGClient.LoginRS.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGClient.LoginRS)
}

::google::protobuf::uint8* LoginRS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGClient.LoginRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CPGClient.LoginRS.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGClient.LoginRS)
  return target;
}

size_t LoginRS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGClient.LoginRS)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginRS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGClient.LoginRS)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRS* source =
      ::google::protobuf::DynamicCastToGenerated<LoginRS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGClient.LoginRS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGClient.LoginRS)
    MergeFrom(*source);
  }
}

void LoginRS::MergeFrom(const LoginRS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGClient.LoginRS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void LoginRS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGClient.LoginRS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRS::CopyFrom(const LoginRS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGClient.LoginRS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRS::IsInitialized() const {
  return true;
}

void LoginRS::Swap(LoginRS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRS::InternalSwap(LoginRS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
}

::google::protobuf::Metadata LoginRS::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGClient_2eproto);
  return ::file_level_metadata_CPGClient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LoginRQ::InitAsDefaultInstance() {
}
class LoginRQ::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRQ::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRQ::LoginRQ()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGClient.LoginRQ)
}
LoginRQ::LoginRQ(const LoginRQ& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CPGClient.LoginRQ)
}

void LoginRQ::SharedCtor() {
  result_ = 0;
}

LoginRQ::~LoginRQ() {
  // @@protoc_insertion_point(destructor:CPGClient.LoginRQ)
  SharedDtor();
}

void LoginRQ::SharedDtor() {
}

void LoginRQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginRQ& LoginRQ::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LoginRQ_CPGClient_2eproto.base);
  return *internal_default_instance();
}


void LoginRQ::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGClient.LoginRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoginRQ::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LoginRQ*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_result(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoginRQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGClient.LoginRQ)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGClient.LoginRQ)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGClient.LoginRQ)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoginRQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGClient.LoginRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGClient.LoginRQ)
}

::google::protobuf::uint8* LoginRQ::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGClient.LoginRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGClient.LoginRQ)
  return target;
}

size_t LoginRQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGClient.LoginRQ)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginRQ::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGClient.LoginRQ)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRQ* source =
      ::google::protobuf::DynamicCastToGenerated<LoginRQ>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGClient.LoginRQ)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGClient.LoginRQ)
    MergeFrom(*source);
  }
}

void LoginRQ::MergeFrom(const LoginRQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGClient.LoginRQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
}

void LoginRQ::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGClient.LoginRQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRQ::CopyFrom(const LoginRQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGClient.LoginRQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRQ::IsInitialized() const {
  return true;
}

void LoginRQ::Swap(LoginRQ* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRQ::InternalSwap(LoginRQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::google::protobuf::Metadata LoginRQ::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGClient_2eproto);
  return ::file_level_metadata_CPGClient_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CPGClient
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::CPGClient::ConnectGateRQ* Arena::CreateMaybeMessage< ::CPGClient::ConnectGateRQ >(Arena* arena) {
  return Arena::CreateInternal< ::CPGClient::ConnectGateRQ >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGClient::ConnectGateRS* Arena::CreateMaybeMessage< ::CPGClient::ConnectGateRS >(Arena* arena) {
  return Arena::CreateInternal< ::CPGClient::ConnectGateRS >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGClient::LoginRS* Arena::CreateMaybeMessage< ::CPGClient::LoginRS >(Arena* arena) {
  return Arena::CreateInternal< ::CPGClient::LoginRS >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGClient::LoginRQ* Arena::CreateMaybeMessage< ::CPGClient::LoginRQ >(Arena* arena) {
  return Arena::CreateInternal< ::CPGClient::LoginRQ >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
