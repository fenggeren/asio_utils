// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CPGServer.proto

#include "CPGServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_CPGServer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CreateMatchRQ_PropertiesEntry_DoNotUse_CPGServer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CPGServer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CreateMatchRS_PropertiesEntry_DoNotUse_CPGServer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CPGServer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GateServerInfo_CPGServer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CPGServer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ServerInfo_CPGServer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CPGServer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ServiceMatchDistibuteNotify_CPGServer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CPGServer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UpdateMatchRQ_PropertiesEntry_DoNotUse_CPGServer_2eproto;
namespace CPGServer {
class ServerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerInfo> _instance;
} _ServerInfo_default_instance_;
class ServerRegisterRQDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerRegisterRQ> _instance;
} _ServerRegisterRQ_default_instance_;
class ServerRegisterRSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerRegisterRS> _instance;
} _ServerRegisterRS_default_instance_;
class NewConnServiceNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NewConnServiceNotify> _instance;
} _NewConnServiceNotify_default_instance_;
class GateServerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GateServerInfo> _instance;
} _GateServerInfo_default_instance_;
class ServerLoginRQDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerLoginRQ> _instance;
} _ServerLoginRQ_default_instance_;
class ServerLoginRSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerLoginRS> _instance;
} _ServerLoginRS_default_instance_;
class ServiceMatchDistibuteNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServiceMatchDistibuteNotify> _instance;
} _ServiceMatchDistibuteNotify_default_instance_;
class ServerAllMatchDistributeNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerAllMatchDistributeNotify> _instance;
} _ServerAllMatchDistributeNotify_default_instance_;
class CheckMatchDistributeRQDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckMatchDistributeRQ> _instance;
} _CheckMatchDistributeRQ_default_instance_;
class CheckMatchDistributeRSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckMatchDistributeRS> _instance;
} _CheckMatchDistributeRS_default_instance_;
class CancelMatchRQDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CancelMatchRQ> _instance;
} _CancelMatchRQ_default_instance_;
class CancelMatchRSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CancelMatchRS> _instance;
} _CancelMatchRS_default_instance_;
class UpdateMatchRQ_PropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateMatchRQ_PropertiesEntry_DoNotUse> _instance;
} _UpdateMatchRQ_PropertiesEntry_DoNotUse_default_instance_;
class UpdateMatchRQDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateMatchRQ> _instance;
} _UpdateMatchRQ_default_instance_;
class UpdateMatchRSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateMatchRS> _instance;
} _UpdateMatchRS_default_instance_;
class CreateMatchRQ_PropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateMatchRQ_PropertiesEntry_DoNotUse> _instance;
} _CreateMatchRQ_PropertiesEntry_DoNotUse_default_instance_;
class CreateMatchRQDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateMatchRQ> _instance;
} _CreateMatchRQ_default_instance_;
class CreateMatchRS_PropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateMatchRS_PropertiesEntry_DoNotUse> _instance;
} _CreateMatchRS_PropertiesEntry_DoNotUse_default_instance_;
class CreateMatchRSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateMatchRS> _instance;
} _CreateMatchRS_default_instance_;
}  // namespace CPGServer
static void InitDefaultsServerInfo_CPGServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGServer::_ServerInfo_default_instance_;
    new (ptr) ::CPGServer::ServerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGServer::ServerInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServerInfo_CPGServer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServerInfo_CPGServer_2eproto}, {}};

static void InitDefaultsServerRegisterRQ_CPGServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGServer::_ServerRegisterRQ_default_instance_;
    new (ptr) ::CPGServer::ServerRegisterRQ();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGServer::ServerRegisterRQ::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ServerRegisterRQ_CPGServer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsServerRegisterRQ_CPGServer_2eproto}, {
      &scc_info_ServerInfo_CPGServer_2eproto.base,}};

static void InitDefaultsServerRegisterRS_CPGServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGServer::_ServerRegisterRS_default_instance_;
    new (ptr) ::CPGServer::ServerRegisterRS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGServer::ServerRegisterRS::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ServerRegisterRS_CPGServer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsServerRegisterRS_CPGServer_2eproto}, {
      &scc_info_ServerInfo_CPGServer_2eproto.base,}};

static void InitDefaultsNewConnServiceNotify_CPGServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGServer::_NewConnServiceNotify_default_instance_;
    new (ptr) ::CPGServer::NewConnServiceNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGServer::NewConnServiceNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NewConnServiceNotify_CPGServer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNewConnServiceNotify_CPGServer_2eproto}, {
      &scc_info_ServerInfo_CPGServer_2eproto.base,}};

static void InitDefaultsGateServerInfo_CPGServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGServer::_GateServerInfo_default_instance_;
    new (ptr) ::CPGServer::GateServerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGServer::GateServerInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GateServerInfo_CPGServer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGateServerInfo_CPGServer_2eproto}, {}};

static void InitDefaultsServerLoginRQ_CPGServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGServer::_ServerLoginRQ_default_instance_;
    new (ptr) ::CPGServer::ServerLoginRQ();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGServer::ServerLoginRQ::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServerLoginRQ_CPGServer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServerLoginRQ_CPGServer_2eproto}, {}};

static void InitDefaultsServerLoginRS_CPGServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGServer::_ServerLoginRS_default_instance_;
    new (ptr) ::CPGServer::ServerLoginRS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGServer::ServerLoginRS::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ServerLoginRS_CPGServer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsServerLoginRS_CPGServer_2eproto}, {
      &scc_info_GateServerInfo_CPGServer_2eproto.base,}};

static void InitDefaultsServiceMatchDistibuteNotify_CPGServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGServer::_ServiceMatchDistibuteNotify_default_instance_;
    new (ptr) ::CPGServer::ServiceMatchDistibuteNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGServer::ServiceMatchDistibuteNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServiceMatchDistibuteNotify_CPGServer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServiceMatchDistibuteNotify_CPGServer_2eproto}, {}};

static void InitDefaultsServerAllMatchDistributeNotify_CPGServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGServer::_ServerAllMatchDistributeNotify_default_instance_;
    new (ptr) ::CPGServer::ServerAllMatchDistributeNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGServer::ServerAllMatchDistributeNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ServerAllMatchDistributeNotify_CPGServer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsServerAllMatchDistributeNotify_CPGServer_2eproto}, {
      &scc_info_ServiceMatchDistibuteNotify_CPGServer_2eproto.base,}};

static void InitDefaultsCheckMatchDistributeRQ_CPGServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGServer::_CheckMatchDistributeRQ_default_instance_;
    new (ptr) ::CPGServer::CheckMatchDistributeRQ();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGServer::CheckMatchDistributeRQ::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CheckMatchDistributeRQ_CPGServer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCheckMatchDistributeRQ_CPGServer_2eproto}, {}};

static void InitDefaultsCheckMatchDistributeRS_CPGServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGServer::_CheckMatchDistributeRS_default_instance_;
    new (ptr) ::CPGServer::CheckMatchDistributeRS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGServer::CheckMatchDistributeRS::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CheckMatchDistributeRS_CPGServer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCheckMatchDistributeRS_CPGServer_2eproto}, {}};

static void InitDefaultsCancelMatchRQ_CPGServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGServer::_CancelMatchRQ_default_instance_;
    new (ptr) ::CPGServer::CancelMatchRQ();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGServer::CancelMatchRQ::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CancelMatchRQ_CPGServer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCancelMatchRQ_CPGServer_2eproto}, {}};

static void InitDefaultsCancelMatchRS_CPGServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGServer::_CancelMatchRS_default_instance_;
    new (ptr) ::CPGServer::CancelMatchRS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGServer::CancelMatchRS::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CancelMatchRS_CPGServer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCancelMatchRS_CPGServer_2eproto}, {}};

static void InitDefaultsUpdateMatchRQ_PropertiesEntry_DoNotUse_CPGServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGServer::_UpdateMatchRQ_PropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::CPGServer::UpdateMatchRQ_PropertiesEntry_DoNotUse();
  }
  ::CPGServer::UpdateMatchRQ_PropertiesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UpdateMatchRQ_PropertiesEntry_DoNotUse_CPGServer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUpdateMatchRQ_PropertiesEntry_DoNotUse_CPGServer_2eproto}, {}};

static void InitDefaultsUpdateMatchRQ_CPGServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGServer::_UpdateMatchRQ_default_instance_;
    new (ptr) ::CPGServer::UpdateMatchRQ();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGServer::UpdateMatchRQ::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UpdateMatchRQ_CPGServer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUpdateMatchRQ_CPGServer_2eproto}, {
      &scc_info_UpdateMatchRQ_PropertiesEntry_DoNotUse_CPGServer_2eproto.base,}};

static void InitDefaultsUpdateMatchRS_CPGServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGServer::_UpdateMatchRS_default_instance_;
    new (ptr) ::CPGServer::UpdateMatchRS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGServer::UpdateMatchRS::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UpdateMatchRS_CPGServer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUpdateMatchRS_CPGServer_2eproto}, {}};

static void InitDefaultsCreateMatchRQ_PropertiesEntry_DoNotUse_CPGServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGServer::_CreateMatchRQ_PropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::CPGServer::CreateMatchRQ_PropertiesEntry_DoNotUse();
  }
  ::CPGServer::CreateMatchRQ_PropertiesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CreateMatchRQ_PropertiesEntry_DoNotUse_CPGServer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCreateMatchRQ_PropertiesEntry_DoNotUse_CPGServer_2eproto}, {}};

static void InitDefaultsCreateMatchRQ_CPGServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGServer::_CreateMatchRQ_default_instance_;
    new (ptr) ::CPGServer::CreateMatchRQ();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGServer::CreateMatchRQ::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CreateMatchRQ_CPGServer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCreateMatchRQ_CPGServer_2eproto}, {
      &scc_info_CreateMatchRQ_PropertiesEntry_DoNotUse_CPGServer_2eproto.base,}};

static void InitDefaultsCreateMatchRS_PropertiesEntry_DoNotUse_CPGServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGServer::_CreateMatchRS_PropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::CPGServer::CreateMatchRS_PropertiesEntry_DoNotUse();
  }
  ::CPGServer::CreateMatchRS_PropertiesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CreateMatchRS_PropertiesEntry_DoNotUse_CPGServer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCreateMatchRS_PropertiesEntry_DoNotUse_CPGServer_2eproto}, {}};

static void InitDefaultsCreateMatchRS_CPGServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CPGServer::_CreateMatchRS_default_instance_;
    new (ptr) ::CPGServer::CreateMatchRS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPGServer::CreateMatchRS::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CreateMatchRS_CPGServer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCreateMatchRS_CPGServer_2eproto}, {
      &scc_info_CreateMatchRS_PropertiesEntry_DoNotUse_CPGServer_2eproto.base,}};

void InitDefaults_CPGServer_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ServerInfo_CPGServer_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerRegisterRQ_CPGServer_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerRegisterRS_CPGServer_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NewConnServiceNotify_CPGServer_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GateServerInfo_CPGServer_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerLoginRQ_CPGServer_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerLoginRS_CPGServer_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServiceMatchDistibuteNotify_CPGServer_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerAllMatchDistributeNotify_CPGServer_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CheckMatchDistributeRQ_CPGServer_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CheckMatchDistributeRS_CPGServer_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CancelMatchRQ_CPGServer_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CancelMatchRS_CPGServer_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateMatchRQ_PropertiesEntry_DoNotUse_CPGServer_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateMatchRQ_CPGServer_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateMatchRS_CPGServer_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateMatchRQ_PropertiesEntry_DoNotUse_CPGServer_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateMatchRQ_CPGServer_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateMatchRS_PropertiesEntry_DoNotUse_CPGServer_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateMatchRS_CPGServer_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_CPGServer_2eproto[20];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_CPGServer_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_CPGServer_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_CPGServer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServerInfo, type_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServerInfo, port_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServerInfo, sid_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServerInfo, ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServerRegisterRQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServerRegisterRQ, sid_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServerRegisterRQ, type_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServerRegisterRQ, connecttypes_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServerRegisterRQ, listeners_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServerRegisterRS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServerRegisterRS, result_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServerRegisterRS, sid_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServerRegisterRS, connservers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGServer::NewConnServiceNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGServer::NewConnServiceNotify, connservers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGServer::GateServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGServer::GateServerInfo, port_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::GateServerInfo, sid_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::GateServerInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::GateServerInfo, exportip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServerLoginRQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServerLoginRQ, cid_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServerLoginRQ, sid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServerLoginRS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServerLoginRS, result_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServerLoginRS, cid_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServerLoginRS, gsinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServiceMatchDistibuteNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServiceMatchDistibuteNotify, sid_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServiceMatchDistibuteNotify, mid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServerAllMatchDistributeNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGServer::ServerAllMatchDistributeNotify, services_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGServer::CheckMatchDistributeRQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGServer::CheckMatchDistributeRQ, sid_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::CheckMatchDistributeRQ, type_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::CheckMatchDistributeRQ, mids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGServer::CheckMatchDistributeRS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGServer::CheckMatchDistributeRS, sid_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::CheckMatchDistributeRS, type_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::CheckMatchDistributeRS, result_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::CheckMatchDistributeRS, mids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGServer::CancelMatchRQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGServer::CancelMatchRQ, mid_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::CancelMatchRQ, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGServer::CancelMatchRS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGServer::CancelMatchRS, mid_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::CancelMatchRS, result_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::UpdateMatchRQ_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::UpdateMatchRQ_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGServer::UpdateMatchRQ_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::UpdateMatchRQ_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGServer::UpdateMatchRQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGServer::UpdateMatchRQ, mid_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::UpdateMatchRQ, properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGServer::UpdateMatchRS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGServer::UpdateMatchRS, mid_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::UpdateMatchRS, result_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::CreateMatchRQ_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::CreateMatchRQ_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGServer::CreateMatchRQ_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::CreateMatchRQ_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGServer::CreateMatchRQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGServer::CreateMatchRQ, properties_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::CreateMatchRS_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::CreateMatchRS_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGServer::CreateMatchRS_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::CPGServer::CreateMatchRS_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPGServer::CreateMatchRS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPGServer::CreateMatchRS, properties_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CPGServer::ServerInfo)},
  { 9, -1, sizeof(::CPGServer::ServerRegisterRQ)},
  { 18, -1, sizeof(::CPGServer::ServerRegisterRS)},
  { 26, -1, sizeof(::CPGServer::NewConnServiceNotify)},
  { 32, -1, sizeof(::CPGServer::GateServerInfo)},
  { 41, -1, sizeof(::CPGServer::ServerLoginRQ)},
  { 48, -1, sizeof(::CPGServer::ServerLoginRS)},
  { 56, -1, sizeof(::CPGServer::ServiceMatchDistibuteNotify)},
  { 63, -1, sizeof(::CPGServer::ServerAllMatchDistributeNotify)},
  { 69, -1, sizeof(::CPGServer::CheckMatchDistributeRQ)},
  { 77, -1, sizeof(::CPGServer::CheckMatchDistributeRS)},
  { 86, -1, sizeof(::CPGServer::CancelMatchRQ)},
  { 93, -1, sizeof(::CPGServer::CancelMatchRS)},
  { 100, 107, sizeof(::CPGServer::UpdateMatchRQ_PropertiesEntry_DoNotUse)},
  { 109, -1, sizeof(::CPGServer::UpdateMatchRQ)},
  { 116, -1, sizeof(::CPGServer::UpdateMatchRS)},
  { 123, 130, sizeof(::CPGServer::CreateMatchRQ_PropertiesEntry_DoNotUse)},
  { 132, -1, sizeof(::CPGServer::CreateMatchRQ)},
  { 138, 145, sizeof(::CPGServer::CreateMatchRS_PropertiesEntry_DoNotUse)},
  { 147, -1, sizeof(::CPGServer::CreateMatchRS)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGServer::_ServerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGServer::_ServerRegisterRQ_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGServer::_ServerRegisterRS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGServer::_NewConnServiceNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGServer::_GateServerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGServer::_ServerLoginRQ_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGServer::_ServerLoginRS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGServer::_ServiceMatchDistibuteNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGServer::_ServerAllMatchDistributeNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGServer::_CheckMatchDistributeRQ_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGServer::_CheckMatchDistributeRS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGServer::_CancelMatchRQ_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGServer::_CancelMatchRS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGServer::_UpdateMatchRQ_PropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGServer::_UpdateMatchRQ_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGServer::_UpdateMatchRS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGServer::_CreateMatchRQ_PropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGServer::_CreateMatchRQ_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGServer::_CreateMatchRS_PropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CPGServer::_CreateMatchRS_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_CPGServer_2eproto = {
  {}, AddDescriptors_CPGServer_2eproto, "CPGServer.proto", schemas,
  file_default_instances, TableStruct_CPGServer_2eproto::offsets,
  file_level_metadata_CPGServer_2eproto, 20, file_level_enum_descriptors_CPGServer_2eproto, file_level_service_descriptors_CPGServer_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_CPGServer_2eproto = {
  false, InitDefaults_CPGServer_2eproto, 
  "\n\017CPGServer.proto\022\tCPGServer\"A\n\nServerIn"
  "fo\022\014\n\004type\030\001 \001(\005\022\014\n\004port\030\002 \001(\005\022\013\n\003sid\030\003 "
  "\001(\005\022\n\n\002ip\030\004 \001(\t\"m\n\020ServerRegisterRQ\022\013\n\003s"
  "id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\024\n\014connectTypes\030\003"
  " \003(\005\022(\n\tlisteners\030\004 \003(\0132\025.CPGServer.Serv"
  "erInfo\"[\n\020ServerRegisterRS\022\016\n\006result\030\001 \001"
  "(\005\022\013\n\003sid\030\002 \001(\005\022*\n\013connServers\030\003 \003(\0132\025.C"
  "PGServer.ServerInfo\"B\n\024NewConnServiceNot"
  "ify\022*\n\013connServers\030\001 \003(\0132\025.CPGServer.Ser"
  "verInfo\"I\n\016GateServerInfo\022\014\n\004port\030\001 \001(\005\022"
  "\013\n\003sid\030\002 \001(\005\022\n\n\002ip\030\003 \001(\t\022\020\n\010exportIP\030\004 \001"
  "(\t\")\n\rServerLoginRQ\022\013\n\003cid\030\001 \001(\005\022\013\n\003sid\030"
  "\002 \001(\005\"W\n\rServerLoginRS\022\016\n\006result\030\001 \001(\005\022\013"
  "\n\003cid\030\002 \001(\005\022)\n\006gsinfo\030\003 \001(\0132\031.CPGServer."
  "GateServerInfo\"7\n\033ServiceMatchDistibuteN"
  "otify\022\013\n\003sid\030\001 \001(\005\022\013\n\003mid\030\002 \003(\005\"Z\n\036Serve"
  "rAllMatchDistributeNotify\0228\n\010services\030\001 "
  "\003(\0132&.CPGServer.ServiceMatchDistibuteNot"
  "ify\"A\n\026CheckMatchDistributeRQ\022\013\n\003sid\030\001 \001"
  "(\005\022\014\n\004type\030\002 \001(\005\022\014\n\004mids\030\003 \003(\005\"Q\n\026CheckM"
  "atchDistributeRS\022\013\n\003sid\030\001 \001(\005\022\014\n\004type\030\002 "
  "\001(\005\022\016\n\006result\030\003 \001(\005\022\014\n\004mids\030\004 \003(\005\",\n\rCan"
  "celMatchRQ\022\013\n\003mid\030\001 \001(\005\022\016\n\006reason\030\002 \001(\005\""
  ",\n\rCancelMatchRS\022\013\n\003mid\030\001 \001(\005\022\016\n\006result\030"
  "\002 \001(\005\"\215\001\n\rUpdateMatchRQ\022\013\n\003mid\030\001 \001(\005\022<\n\n"
  "properties\030\002 \003(\0132(.CPGServer.UpdateMatch"
  "RQ.PropertiesEntry\0321\n\017PropertiesEntry\022\013\n"
  "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\",\n\rUpdateM"
  "atchRS\022\013\n\003mid\030\001 \001(\005\022\016\n\006result\030\002 \001(\005\"\200\001\n\r"
  "CreateMatchRQ\022<\n\nproperties\030\001 \003(\0132(.CPGS"
  "erver.CreateMatchRQ.PropertiesEntry\0321\n\017P"
  "ropertiesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001"
  "(\t:\0028\001\"\200\001\n\rCreateMatchRS\022<\n\nproperties\030\001"
  " \003(\0132(.CPGServer.CreateMatchRS.Propertie"
  "sEntry\0321\n\017PropertiesEntry\022\013\n\003key\030\001 \001(\t\022\r"
  "\n\005value\030\002 \001(\t:\0028\001b\006proto3"
,
  "CPGServer.proto", &assign_descriptors_table_CPGServer_2eproto, 1425,
};

void AddDescriptors_CPGServer_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_CPGServer_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_CPGServer_2eproto = []() { AddDescriptors_CPGServer_2eproto(); return true; }();
namespace CPGServer {

// ===================================================================

void ServerInfo::InitAsDefaultInstance() {
}
class ServerInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerInfo::kTypeFieldNumber;
const int ServerInfo::kPortFieldNumber;
const int ServerInfo::kSidFieldNumber;
const int ServerInfo::kIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerInfo::ServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGServer.ServerInfo)
}
ServerInfo::ServerInfo(const ServerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&sid_) -
    reinterpret_cast<char*>(&type_)) + sizeof(sid_));
  // @@protoc_insertion_point(copy_constructor:CPGServer.ServerInfo)
}

void ServerInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ServerInfo_CPGServer_2eproto.base);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(sid_));
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:CPGServer.ServerInfo)
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerInfo& ServerInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ServerInfo_CPGServer_2eproto.base);
  return *internal_default_instance();
}


void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGServer.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(sid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ServerInfo*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_type(value);
        break;
      }
      // int32 port = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_port(value);
        break;
      }
      // int32 sid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_sid(value);
        break;
      }
      // string ip = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("CPGServer.ServerInfo.ip");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_ip();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGServer.ServerInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CPGServer.ServerInfo.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGServer.ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGServer.ServerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGServer.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // int32 sid = 3;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sid(), output);
  }

  // string ip = 4;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CPGServer.ServerInfo.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGServer.ServerInfo)
}

::google::protobuf::uint8* ServerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGServer.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // int32 sid = 3;
  if (this->sid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sid(), target);
  }

  // string ip = 4;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CPGServer.ServerInfo.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGServer.ServerInfo)
  return target;
}

size_t ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGServer.ServerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 4;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // int32 sid = 3;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGServer.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerInfo* source =
      ::google::protobuf::DynamicCastToGenerated<ServerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGServer.ServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGServer.ServerInfo)
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGServer.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.sid() != 0) {
    set_sid(from.sid());
  }
}

void ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGServer.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGServer.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerInfo::InternalSwap(ServerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(port_, other->port_);
  swap(sid_, other->sid_);
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGServer_2eproto);
  return ::file_level_metadata_CPGServer_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ServerRegisterRQ::InitAsDefaultInstance() {
}
class ServerRegisterRQ::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerRegisterRQ::kSidFieldNumber;
const int ServerRegisterRQ::kTypeFieldNumber;
const int ServerRegisterRQ::kConnectTypesFieldNumber;
const int ServerRegisterRQ::kListenersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerRegisterRQ::ServerRegisterRQ()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGServer.ServerRegisterRQ)
}
ServerRegisterRQ::ServerRegisterRQ(const ServerRegisterRQ& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      connecttypes_(from.connecttypes_),
      listeners_(from.listeners_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sid_, &from.sid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&sid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:CPGServer.ServerRegisterRQ)
}

void ServerRegisterRQ::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ServerRegisterRQ_CPGServer_2eproto.base);
  ::memset(&sid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&sid_)) + sizeof(type_));
}

ServerRegisterRQ::~ServerRegisterRQ() {
  // @@protoc_insertion_point(destructor:CPGServer.ServerRegisterRQ)
  SharedDtor();
}

void ServerRegisterRQ::SharedDtor() {
}

void ServerRegisterRQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerRegisterRQ& ServerRegisterRQ::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ServerRegisterRQ_CPGServer_2eproto.base);
  return *internal_default_instance();
}


void ServerRegisterRQ::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGServer.ServerRegisterRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connecttypes_.Clear();
  listeners_.Clear();
  ::memset(&sid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&sid_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerRegisterRQ::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ServerRegisterRQ*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 sid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_sid(value);
        break;
      }
      // int32 type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_type(value);
        break;
      }
      // repeated int32 connectTypes = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_connecttypes();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val;
          ptr = Varint::Parse64(ptr, &val);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ::google::protobuf::int32 value = val;
          msg->add_connecttypes(value);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      // repeated .CPGServer.ServerInfo listeners = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::CPGServer::ServerInfo::_InternalParse;
          object = msg->add_listeners();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerRegisterRQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGServer.ServerRegisterRQ)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 connectTypes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_connecttypes())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_connecttypes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CPGServer.ServerInfo listeners = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_listeners()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGServer.ServerRegisterRQ)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGServer.ServerRegisterRQ)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerRegisterRQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGServer.ServerRegisterRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sid = 1;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated int32 connectTypes = 3;
  if (this->connecttypes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_connecttypes_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->connecttypes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->connecttypes(i), output);
  }

  // repeated .CPGServer.ServerInfo listeners = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->listeners_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->listeners(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGServer.ServerRegisterRQ)
}

::google::protobuf::uint8* ServerRegisterRQ::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGServer.ServerRegisterRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sid = 1;
  if (this->sid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // repeated int32 connectTypes = 3;
  if (this->connecttypes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _connecttypes_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->connecttypes_, target);
  }

  // repeated .CPGServer.ServerInfo listeners = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->listeners_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->listeners(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGServer.ServerRegisterRQ)
  return target;
}

size_t ServerRegisterRQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGServer.ServerRegisterRQ)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 connectTypes = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->connecttypes_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _connecttypes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .CPGServer.ServerInfo listeners = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->listeners_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->listeners(static_cast<int>(i)));
    }
  }

  // int32 sid = 1;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerRegisterRQ::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGServer.ServerRegisterRQ)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerRegisterRQ* source =
      ::google::protobuf::DynamicCastToGenerated<ServerRegisterRQ>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGServer.ServerRegisterRQ)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGServer.ServerRegisterRQ)
    MergeFrom(*source);
  }
}

void ServerRegisterRQ::MergeFrom(const ServerRegisterRQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGServer.ServerRegisterRQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connecttypes_.MergeFrom(from.connecttypes_);
  listeners_.MergeFrom(from.listeners_);
  if (from.sid() != 0) {
    set_sid(from.sid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ServerRegisterRQ::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGServer.ServerRegisterRQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerRegisterRQ::CopyFrom(const ServerRegisterRQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGServer.ServerRegisterRQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerRegisterRQ::IsInitialized() const {
  return true;
}

void ServerRegisterRQ::Swap(ServerRegisterRQ* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerRegisterRQ::InternalSwap(ServerRegisterRQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  connecttypes_.InternalSwap(&other->connecttypes_);
  CastToBase(&listeners_)->InternalSwap(CastToBase(&other->listeners_));
  swap(sid_, other->sid_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata ServerRegisterRQ::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGServer_2eproto);
  return ::file_level_metadata_CPGServer_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ServerRegisterRS::InitAsDefaultInstance() {
}
class ServerRegisterRS::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerRegisterRS::kResultFieldNumber;
const int ServerRegisterRS::kSidFieldNumber;
const int ServerRegisterRS::kConnServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerRegisterRS::ServerRegisterRS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGServer.ServerRegisterRS)
}
ServerRegisterRS::ServerRegisterRS(const ServerRegisterRS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      connservers_(from.connservers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&sid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(sid_));
  // @@protoc_insertion_point(copy_constructor:CPGServer.ServerRegisterRS)
}

void ServerRegisterRS::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ServerRegisterRS_CPGServer_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sid_) -
      reinterpret_cast<char*>(&result_)) + sizeof(sid_));
}

ServerRegisterRS::~ServerRegisterRS() {
  // @@protoc_insertion_point(destructor:CPGServer.ServerRegisterRS)
  SharedDtor();
}

void ServerRegisterRS::SharedDtor() {
}

void ServerRegisterRS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerRegisterRS& ServerRegisterRS::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ServerRegisterRS_CPGServer_2eproto.base);
  return *internal_default_instance();
}


void ServerRegisterRS::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGServer.ServerRegisterRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connservers_.Clear();
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sid_) -
      reinterpret_cast<char*>(&result_)) + sizeof(sid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerRegisterRS::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ServerRegisterRS*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_result(value);
        break;
      }
      // int32 sid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_sid(value);
        break;
      }
      // repeated .CPGServer.ServerInfo connServers = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::CPGServer::ServerInfo::_InternalParse;
          object = msg->add_connservers();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerRegisterRS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGServer.ServerRegisterRS)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CPGServer.ServerInfo connServers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_connservers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGServer.ServerRegisterRS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGServer.ServerRegisterRS)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerRegisterRS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGServer.ServerRegisterRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // int32 sid = 2;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }

  // repeated .CPGServer.ServerInfo connServers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connservers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->connservers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGServer.ServerRegisterRS)
}

::google::protobuf::uint8* ServerRegisterRS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGServer.ServerRegisterRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // int32 sid = 2;
  if (this->sid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }

  // repeated .CPGServer.ServerInfo connServers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connservers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->connservers(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGServer.ServerRegisterRS)
  return target;
}

size_t ServerRegisterRS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGServer.ServerRegisterRS)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPGServer.ServerInfo connServers = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->connservers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->connservers(static_cast<int>(i)));
    }
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  // int32 sid = 2;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerRegisterRS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGServer.ServerRegisterRS)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerRegisterRS* source =
      ::google::protobuf::DynamicCastToGenerated<ServerRegisterRS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGServer.ServerRegisterRS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGServer.ServerRegisterRS)
    MergeFrom(*source);
  }
}

void ServerRegisterRS::MergeFrom(const ServerRegisterRS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGServer.ServerRegisterRS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connservers_.MergeFrom(from.connservers_);
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.sid() != 0) {
    set_sid(from.sid());
  }
}

void ServerRegisterRS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGServer.ServerRegisterRS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerRegisterRS::CopyFrom(const ServerRegisterRS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGServer.ServerRegisterRS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerRegisterRS::IsInitialized() const {
  return true;
}

void ServerRegisterRS::Swap(ServerRegisterRS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerRegisterRS::InternalSwap(ServerRegisterRS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&connservers_)->InternalSwap(CastToBase(&other->connservers_));
  swap(result_, other->result_);
  swap(sid_, other->sid_);
}

::google::protobuf::Metadata ServerRegisterRS::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGServer_2eproto);
  return ::file_level_metadata_CPGServer_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NewConnServiceNotify::InitAsDefaultInstance() {
}
class NewConnServiceNotify::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewConnServiceNotify::kConnServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewConnServiceNotify::NewConnServiceNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGServer.NewConnServiceNotify)
}
NewConnServiceNotify::NewConnServiceNotify(const NewConnServiceNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      connservers_(from.connservers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPGServer.NewConnServiceNotify)
}

void NewConnServiceNotify::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NewConnServiceNotify_CPGServer_2eproto.base);
}

NewConnServiceNotify::~NewConnServiceNotify() {
  // @@protoc_insertion_point(destructor:CPGServer.NewConnServiceNotify)
  SharedDtor();
}

void NewConnServiceNotify::SharedDtor() {
}

void NewConnServiceNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewConnServiceNotify& NewConnServiceNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NewConnServiceNotify_CPGServer_2eproto.base);
  return *internal_default_instance();
}


void NewConnServiceNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGServer.NewConnServiceNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connservers_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NewConnServiceNotify::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NewConnServiceNotify*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .CPGServer.ServerInfo connServers = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::CPGServer::ServerInfo::_InternalParse;
          object = msg->add_connservers();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NewConnServiceNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGServer.NewConnServiceNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CPGServer.ServerInfo connServers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_connservers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGServer.NewConnServiceNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGServer.NewConnServiceNotify)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NewConnServiceNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGServer.NewConnServiceNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPGServer.ServerInfo connServers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connservers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->connservers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGServer.NewConnServiceNotify)
}

::google::protobuf::uint8* NewConnServiceNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGServer.NewConnServiceNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPGServer.ServerInfo connServers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connservers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->connservers(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGServer.NewConnServiceNotify)
  return target;
}

size_t NewConnServiceNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGServer.NewConnServiceNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPGServer.ServerInfo connServers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->connservers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->connservers(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewConnServiceNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGServer.NewConnServiceNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const NewConnServiceNotify* source =
      ::google::protobuf::DynamicCastToGenerated<NewConnServiceNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGServer.NewConnServiceNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGServer.NewConnServiceNotify)
    MergeFrom(*source);
  }
}

void NewConnServiceNotify::MergeFrom(const NewConnServiceNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGServer.NewConnServiceNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connservers_.MergeFrom(from.connservers_);
}

void NewConnServiceNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGServer.NewConnServiceNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewConnServiceNotify::CopyFrom(const NewConnServiceNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGServer.NewConnServiceNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewConnServiceNotify::IsInitialized() const {
  return true;
}

void NewConnServiceNotify::Swap(NewConnServiceNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewConnServiceNotify::InternalSwap(NewConnServiceNotify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&connservers_)->InternalSwap(CastToBase(&other->connservers_));
}

::google::protobuf::Metadata NewConnServiceNotify::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGServer_2eproto);
  return ::file_level_metadata_CPGServer_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GateServerInfo::InitAsDefaultInstance() {
}
class GateServerInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GateServerInfo::kPortFieldNumber;
const int GateServerInfo::kSidFieldNumber;
const int GateServerInfo::kIpFieldNumber;
const int GateServerInfo::kExportIPFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GateServerInfo::GateServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGServer.GateServerInfo)
}
GateServerInfo::GateServerInfo(const GateServerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  exportip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exportip().size() > 0) {
    exportip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exportip_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&sid_) -
    reinterpret_cast<char*>(&port_)) + sizeof(sid_));
  // @@protoc_insertion_point(copy_constructor:CPGServer.GateServerInfo)
}

void GateServerInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GateServerInfo_CPGServer_2eproto.base);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exportip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sid_) -
      reinterpret_cast<char*>(&port_)) + sizeof(sid_));
}

GateServerInfo::~GateServerInfo() {
  // @@protoc_insertion_point(destructor:CPGServer.GateServerInfo)
  SharedDtor();
}

void GateServerInfo::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exportip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GateServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GateServerInfo& GateServerInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GateServerInfo_CPGServer_2eproto.base);
  return *internal_default_instance();
}


void GateServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGServer.GateServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exportip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sid_) -
      reinterpret_cast<char*>(&port_)) + sizeof(sid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GateServerInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GateServerInfo*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 port = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_port(value);
        break;
      }
      // int32 sid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_sid(value);
        break;
      }
      // string ip = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("CPGServer.GateServerInfo.ip");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_ip();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // string exportIP = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("CPGServer.GateServerInfo.exportIP");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_exportip();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GateServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGServer.GateServerInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CPGServer.GateServerInfo.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exportIP = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exportip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exportip().data(), static_cast<int>(this->exportip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CPGServer.GateServerInfo.exportIP"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGServer.GateServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGServer.GateServerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GateServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGServer.GateServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port = 1;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->port(), output);
  }

  // int32 sid = 2;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CPGServer.GateServerInfo.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // string exportIP = 4;
  if (this->exportip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exportip().data(), static_cast<int>(this->exportip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CPGServer.GateServerInfo.exportIP");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exportip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGServer.GateServerInfo)
}

::google::protobuf::uint8* GateServerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGServer.GateServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port = 1;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->port(), target);
  }

  // int32 sid = 2;
  if (this->sid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CPGServer.GateServerInfo.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // string exportIP = 4;
  if (this->exportip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exportip().data(), static_cast<int>(this->exportip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CPGServer.GateServerInfo.exportIP");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exportip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGServer.GateServerInfo)
  return target;
}

size_t GateServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGServer.GateServerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // string exportIP = 4;
  if (this->exportip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exportip());
  }

  // int32 port = 1;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // int32 sid = 2;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GateServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGServer.GateServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GateServerInfo* source =
      ::google::protobuf::DynamicCastToGenerated<GateServerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGServer.GateServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGServer.GateServerInfo)
    MergeFrom(*source);
  }
}

void GateServerInfo::MergeFrom(const GateServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGServer.GateServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.exportip().size() > 0) {

    exportip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exportip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.sid() != 0) {
    set_sid(from.sid());
  }
}

void GateServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGServer.GateServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateServerInfo::CopyFrom(const GateServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGServer.GateServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateServerInfo::IsInitialized() const {
  return true;
}

void GateServerInfo::Swap(GateServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateServerInfo::InternalSwap(GateServerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exportip_.Swap(&other->exportip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(sid_, other->sid_);
}

::google::protobuf::Metadata GateServerInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGServer_2eproto);
  return ::file_level_metadata_CPGServer_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ServerLoginRQ::InitAsDefaultInstance() {
}
class ServerLoginRQ::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerLoginRQ::kCidFieldNumber;
const int ServerLoginRQ::kSidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerLoginRQ::ServerLoginRQ()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGServer.ServerLoginRQ)
}
ServerLoginRQ::ServerLoginRQ(const ServerLoginRQ& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cid_, &from.cid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sid_) -
    reinterpret_cast<char*>(&cid_)) + sizeof(sid_));
  // @@protoc_insertion_point(copy_constructor:CPGServer.ServerLoginRQ)
}

void ServerLoginRQ::SharedCtor() {
  ::memset(&cid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sid_) -
      reinterpret_cast<char*>(&cid_)) + sizeof(sid_));
}

ServerLoginRQ::~ServerLoginRQ() {
  // @@protoc_insertion_point(destructor:CPGServer.ServerLoginRQ)
  SharedDtor();
}

void ServerLoginRQ::SharedDtor() {
}

void ServerLoginRQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerLoginRQ& ServerLoginRQ::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ServerLoginRQ_CPGServer_2eproto.base);
  return *internal_default_instance();
}


void ServerLoginRQ::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGServer.ServerLoginRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sid_) -
      reinterpret_cast<char*>(&cid_)) + sizeof(sid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerLoginRQ::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ServerLoginRQ*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 cid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_cid(value);
        break;
      }
      // int32 sid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_sid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerLoginRQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGServer.ServerLoginRQ)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 cid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGServer.ServerLoginRQ)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGServer.ServerLoginRQ)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerLoginRQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGServer.ServerLoginRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cid = 1;
  if (this->cid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cid(), output);
  }

  // int32 sid = 2;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGServer.ServerLoginRQ)
}

::google::protobuf::uint8* ServerLoginRQ::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGServer.ServerLoginRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cid = 1;
  if (this->cid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cid(), target);
  }

  // int32 sid = 2;
  if (this->sid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGServer.ServerLoginRQ)
  return target;
}

size_t ServerLoginRQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGServer.ServerLoginRQ)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cid = 1;
  if (this->cid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cid());
  }

  // int32 sid = 2;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerLoginRQ::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGServer.ServerLoginRQ)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerLoginRQ* source =
      ::google::protobuf::DynamicCastToGenerated<ServerLoginRQ>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGServer.ServerLoginRQ)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGServer.ServerLoginRQ)
    MergeFrom(*source);
  }
}

void ServerLoginRQ::MergeFrom(const ServerLoginRQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGServer.ServerLoginRQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cid() != 0) {
    set_cid(from.cid());
  }
  if (from.sid() != 0) {
    set_sid(from.sid());
  }
}

void ServerLoginRQ::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGServer.ServerLoginRQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerLoginRQ::CopyFrom(const ServerLoginRQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGServer.ServerLoginRQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerLoginRQ::IsInitialized() const {
  return true;
}

void ServerLoginRQ::Swap(ServerLoginRQ* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerLoginRQ::InternalSwap(ServerLoginRQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cid_, other->cid_);
  swap(sid_, other->sid_);
}

::google::protobuf::Metadata ServerLoginRQ::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGServer_2eproto);
  return ::file_level_metadata_CPGServer_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ServerLoginRS::InitAsDefaultInstance() {
  ::CPGServer::_ServerLoginRS_default_instance_._instance.get_mutable()->gsinfo_ = const_cast< ::CPGServer::GateServerInfo*>(
      ::CPGServer::GateServerInfo::internal_default_instance());
}
class ServerLoginRS::HasBitSetters {
 public:
  static const ::CPGServer::GateServerInfo& gsinfo(const ServerLoginRS* msg);
};

const ::CPGServer::GateServerInfo&
ServerLoginRS::HasBitSetters::gsinfo(const ServerLoginRS* msg) {
  return *msg->gsinfo_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerLoginRS::kResultFieldNumber;
const int ServerLoginRS::kCidFieldNumber;
const int ServerLoginRS::kGsinfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerLoginRS::ServerLoginRS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGServer.ServerLoginRS)
}
ServerLoginRS::ServerLoginRS(const ServerLoginRS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gsinfo()) {
    gsinfo_ = new ::CPGServer::GateServerInfo(*from.gsinfo_);
  } else {
    gsinfo_ = NULL;
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&cid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(cid_));
  // @@protoc_insertion_point(copy_constructor:CPGServer.ServerLoginRS)
}

void ServerLoginRS::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ServerLoginRS_CPGServer_2eproto.base);
  ::memset(&gsinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cid_) -
      reinterpret_cast<char*>(&gsinfo_)) + sizeof(cid_));
}

ServerLoginRS::~ServerLoginRS() {
  // @@protoc_insertion_point(destructor:CPGServer.ServerLoginRS)
  SharedDtor();
}

void ServerLoginRS::SharedDtor() {
  if (this != internal_default_instance()) delete gsinfo_;
}

void ServerLoginRS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerLoginRS& ServerLoginRS::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ServerLoginRS_CPGServer_2eproto.base);
  return *internal_default_instance();
}


void ServerLoginRS::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGServer.ServerLoginRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && gsinfo_ != NULL) {
    delete gsinfo_;
  }
  gsinfo_ = NULL;
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cid_) -
      reinterpret_cast<char*>(&result_)) + sizeof(cid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerLoginRS::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ServerLoginRS*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_result(value);
        break;
      }
      // int32 cid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_cid(value);
        break;
      }
      // .CPGServer.GateServerInfo gsinfo = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::CPGServer::GateServerInfo::_InternalParse;
        object = msg->mutable_gsinfo();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerLoginRS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGServer.ServerLoginRS)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CPGServer.GateServerInfo gsinfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gsinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGServer.ServerLoginRS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGServer.ServerLoginRS)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerLoginRS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGServer.ServerLoginRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // int32 cid = 2;
  if (this->cid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cid(), output);
  }

  // .CPGServer.GateServerInfo gsinfo = 3;
  if (this->has_gsinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::gsinfo(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGServer.ServerLoginRS)
}

::google::protobuf::uint8* ServerLoginRS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGServer.ServerLoginRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // int32 cid = 2;
  if (this->cid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cid(), target);
  }

  // .CPGServer.GateServerInfo gsinfo = 3;
  if (this->has_gsinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::gsinfo(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGServer.ServerLoginRS)
  return target;
}

size_t ServerLoginRS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGServer.ServerLoginRS)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CPGServer.GateServerInfo gsinfo = 3;
  if (this->has_gsinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gsinfo_);
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  // int32 cid = 2;
  if (this->cid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerLoginRS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGServer.ServerLoginRS)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerLoginRS* source =
      ::google::protobuf::DynamicCastToGenerated<ServerLoginRS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGServer.ServerLoginRS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGServer.ServerLoginRS)
    MergeFrom(*source);
  }
}

void ServerLoginRS::MergeFrom(const ServerLoginRS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGServer.ServerLoginRS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gsinfo()) {
    mutable_gsinfo()->::CPGServer::GateServerInfo::MergeFrom(from.gsinfo());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.cid() != 0) {
    set_cid(from.cid());
  }
}

void ServerLoginRS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGServer.ServerLoginRS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerLoginRS::CopyFrom(const ServerLoginRS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGServer.ServerLoginRS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerLoginRS::IsInitialized() const {
  return true;
}

void ServerLoginRS::Swap(ServerLoginRS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerLoginRS::InternalSwap(ServerLoginRS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gsinfo_, other->gsinfo_);
  swap(result_, other->result_);
  swap(cid_, other->cid_);
}

::google::protobuf::Metadata ServerLoginRS::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGServer_2eproto);
  return ::file_level_metadata_CPGServer_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ServiceMatchDistibuteNotify::InitAsDefaultInstance() {
}
class ServiceMatchDistibuteNotify::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceMatchDistibuteNotify::kSidFieldNumber;
const int ServiceMatchDistibuteNotify::kMidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceMatchDistibuteNotify::ServiceMatchDistibuteNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGServer.ServiceMatchDistibuteNotify)
}
ServiceMatchDistibuteNotify::ServiceMatchDistibuteNotify(const ServiceMatchDistibuteNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mid_(from.mid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sid_ = from.sid_;
  // @@protoc_insertion_point(copy_constructor:CPGServer.ServiceMatchDistibuteNotify)
}

void ServiceMatchDistibuteNotify::SharedCtor() {
  sid_ = 0;
}

ServiceMatchDistibuteNotify::~ServiceMatchDistibuteNotify() {
  // @@protoc_insertion_point(destructor:CPGServer.ServiceMatchDistibuteNotify)
  SharedDtor();
}

void ServiceMatchDistibuteNotify::SharedDtor() {
}

void ServiceMatchDistibuteNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceMatchDistibuteNotify& ServiceMatchDistibuteNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ServiceMatchDistibuteNotify_CPGServer_2eproto.base);
  return *internal_default_instance();
}


void ServiceMatchDistibuteNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGServer.ServiceMatchDistibuteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mid_.Clear();
  sid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServiceMatchDistibuteNotify::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ServiceMatchDistibuteNotify*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 sid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_sid(value);
        break;
      }
      // repeated int32 mid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_mid();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val;
          ptr = Varint::Parse64(ptr, &val);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ::google::protobuf::int32 value = val;
          msg->add_mid(value);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServiceMatchDistibuteNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGServer.ServiceMatchDistibuteNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 mid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_mid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGServer.ServiceMatchDistibuteNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGServer.ServiceMatchDistibuteNotify)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServiceMatchDistibuteNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGServer.ServiceMatchDistibuteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sid = 1;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }

  // repeated int32 mid = 2;
  if (this->mid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_mid_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->mid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->mid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGServer.ServiceMatchDistibuteNotify)
}

::google::protobuf::uint8* ServiceMatchDistibuteNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGServer.ServiceMatchDistibuteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sid = 1;
  if (this->sid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }

  // repeated int32 mid = 2;
  if (this->mid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _mid_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->mid_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGServer.ServiceMatchDistibuteNotify)
  return target;
}

size_t ServiceMatchDistibuteNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGServer.ServiceMatchDistibuteNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 mid = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->mid_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _mid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 sid = 1;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceMatchDistibuteNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGServer.ServiceMatchDistibuteNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceMatchDistibuteNotify* source =
      ::google::protobuf::DynamicCastToGenerated<ServiceMatchDistibuteNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGServer.ServiceMatchDistibuteNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGServer.ServiceMatchDistibuteNotify)
    MergeFrom(*source);
  }
}

void ServiceMatchDistibuteNotify::MergeFrom(const ServiceMatchDistibuteNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGServer.ServiceMatchDistibuteNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mid_.MergeFrom(from.mid_);
  if (from.sid() != 0) {
    set_sid(from.sid());
  }
}

void ServiceMatchDistibuteNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGServer.ServiceMatchDistibuteNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceMatchDistibuteNotify::CopyFrom(const ServiceMatchDistibuteNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGServer.ServiceMatchDistibuteNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceMatchDistibuteNotify::IsInitialized() const {
  return true;
}

void ServiceMatchDistibuteNotify::Swap(ServiceMatchDistibuteNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceMatchDistibuteNotify::InternalSwap(ServiceMatchDistibuteNotify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  mid_.InternalSwap(&other->mid_);
  swap(sid_, other->sid_);
}

::google::protobuf::Metadata ServiceMatchDistibuteNotify::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGServer_2eproto);
  return ::file_level_metadata_CPGServer_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ServerAllMatchDistributeNotify::InitAsDefaultInstance() {
}
class ServerAllMatchDistributeNotify::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerAllMatchDistributeNotify::kServicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerAllMatchDistributeNotify::ServerAllMatchDistributeNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGServer.ServerAllMatchDistributeNotify)
}
ServerAllMatchDistributeNotify::ServerAllMatchDistributeNotify(const ServerAllMatchDistributeNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      services_(from.services_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPGServer.ServerAllMatchDistributeNotify)
}

void ServerAllMatchDistributeNotify::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ServerAllMatchDistributeNotify_CPGServer_2eproto.base);
}

ServerAllMatchDistributeNotify::~ServerAllMatchDistributeNotify() {
  // @@protoc_insertion_point(destructor:CPGServer.ServerAllMatchDistributeNotify)
  SharedDtor();
}

void ServerAllMatchDistributeNotify::SharedDtor() {
}

void ServerAllMatchDistributeNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerAllMatchDistributeNotify& ServerAllMatchDistributeNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ServerAllMatchDistributeNotify_CPGServer_2eproto.base);
  return *internal_default_instance();
}


void ServerAllMatchDistributeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGServer.ServerAllMatchDistributeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  services_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerAllMatchDistributeNotify::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ServerAllMatchDistributeNotify*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .CPGServer.ServiceMatchDistibuteNotify services = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::CPGServer::ServiceMatchDistibuteNotify::_InternalParse;
          object = msg->add_services();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerAllMatchDistributeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGServer.ServerAllMatchDistributeNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CPGServer.ServiceMatchDistibuteNotify services = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_services()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGServer.ServerAllMatchDistributeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGServer.ServerAllMatchDistributeNotify)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerAllMatchDistributeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGServer.ServerAllMatchDistributeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPGServer.ServiceMatchDistibuteNotify services = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->services_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->services(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGServer.ServerAllMatchDistributeNotify)
}

::google::protobuf::uint8* ServerAllMatchDistributeNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGServer.ServerAllMatchDistributeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPGServer.ServiceMatchDistibuteNotify services = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->services_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->services(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGServer.ServerAllMatchDistributeNotify)
  return target;
}

size_t ServerAllMatchDistributeNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGServer.ServerAllMatchDistributeNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPGServer.ServiceMatchDistibuteNotify services = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->services_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->services(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerAllMatchDistributeNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGServer.ServerAllMatchDistributeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerAllMatchDistributeNotify* source =
      ::google::protobuf::DynamicCastToGenerated<ServerAllMatchDistributeNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGServer.ServerAllMatchDistributeNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGServer.ServerAllMatchDistributeNotify)
    MergeFrom(*source);
  }
}

void ServerAllMatchDistributeNotify::MergeFrom(const ServerAllMatchDistributeNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGServer.ServerAllMatchDistributeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  services_.MergeFrom(from.services_);
}

void ServerAllMatchDistributeNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGServer.ServerAllMatchDistributeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerAllMatchDistributeNotify::CopyFrom(const ServerAllMatchDistributeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGServer.ServerAllMatchDistributeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerAllMatchDistributeNotify::IsInitialized() const {
  return true;
}

void ServerAllMatchDistributeNotify::Swap(ServerAllMatchDistributeNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerAllMatchDistributeNotify::InternalSwap(ServerAllMatchDistributeNotify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&services_)->InternalSwap(CastToBase(&other->services_));
}

::google::protobuf::Metadata ServerAllMatchDistributeNotify::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGServer_2eproto);
  return ::file_level_metadata_CPGServer_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CheckMatchDistributeRQ::InitAsDefaultInstance() {
}
class CheckMatchDistributeRQ::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckMatchDistributeRQ::kSidFieldNumber;
const int CheckMatchDistributeRQ::kTypeFieldNumber;
const int CheckMatchDistributeRQ::kMidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckMatchDistributeRQ::CheckMatchDistributeRQ()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGServer.CheckMatchDistributeRQ)
}
CheckMatchDistributeRQ::CheckMatchDistributeRQ(const CheckMatchDistributeRQ& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mids_(from.mids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sid_, &from.sid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&sid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:CPGServer.CheckMatchDistributeRQ)
}

void CheckMatchDistributeRQ::SharedCtor() {
  ::memset(&sid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&sid_)) + sizeof(type_));
}

CheckMatchDistributeRQ::~CheckMatchDistributeRQ() {
  // @@protoc_insertion_point(destructor:CPGServer.CheckMatchDistributeRQ)
  SharedDtor();
}

void CheckMatchDistributeRQ::SharedDtor() {
}

void CheckMatchDistributeRQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckMatchDistributeRQ& CheckMatchDistributeRQ::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CheckMatchDistributeRQ_CPGServer_2eproto.base);
  return *internal_default_instance();
}


void CheckMatchDistributeRQ::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGServer.CheckMatchDistributeRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mids_.Clear();
  ::memset(&sid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&sid_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckMatchDistributeRQ::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CheckMatchDistributeRQ*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 sid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_sid(value);
        break;
      }
      // int32 type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_type(value);
        break;
      }
      // repeated int32 mids = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_mids();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val;
          ptr = Varint::Parse64(ptr, &val);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ::google::protobuf::int32 value = val;
          msg->add_mids(value);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckMatchDistributeRQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGServer.CheckMatchDistributeRQ)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 mids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_mids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGServer.CheckMatchDistributeRQ)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGServer.CheckMatchDistributeRQ)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckMatchDistributeRQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGServer.CheckMatchDistributeRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sid = 1;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated int32 mids = 3;
  if (this->mids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_mids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->mids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->mids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGServer.CheckMatchDistributeRQ)
}

::google::protobuf::uint8* CheckMatchDistributeRQ::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGServer.CheckMatchDistributeRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sid = 1;
  if (this->sid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // repeated int32 mids = 3;
  if (this->mids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _mids_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->mids_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGServer.CheckMatchDistributeRQ)
  return target;
}

size_t CheckMatchDistributeRQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGServer.CheckMatchDistributeRQ)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 mids = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->mids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _mids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 sid = 1;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckMatchDistributeRQ::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGServer.CheckMatchDistributeRQ)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckMatchDistributeRQ* source =
      ::google::protobuf::DynamicCastToGenerated<CheckMatchDistributeRQ>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGServer.CheckMatchDistributeRQ)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGServer.CheckMatchDistributeRQ)
    MergeFrom(*source);
  }
}

void CheckMatchDistributeRQ::MergeFrom(const CheckMatchDistributeRQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGServer.CheckMatchDistributeRQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mids_.MergeFrom(from.mids_);
  if (from.sid() != 0) {
    set_sid(from.sid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void CheckMatchDistributeRQ::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGServer.CheckMatchDistributeRQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckMatchDistributeRQ::CopyFrom(const CheckMatchDistributeRQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGServer.CheckMatchDistributeRQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckMatchDistributeRQ::IsInitialized() const {
  return true;
}

void CheckMatchDistributeRQ::Swap(CheckMatchDistributeRQ* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckMatchDistributeRQ::InternalSwap(CheckMatchDistributeRQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  mids_.InternalSwap(&other->mids_);
  swap(sid_, other->sid_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata CheckMatchDistributeRQ::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGServer_2eproto);
  return ::file_level_metadata_CPGServer_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CheckMatchDistributeRS::InitAsDefaultInstance() {
}
class CheckMatchDistributeRS::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckMatchDistributeRS::kSidFieldNumber;
const int CheckMatchDistributeRS::kTypeFieldNumber;
const int CheckMatchDistributeRS::kResultFieldNumber;
const int CheckMatchDistributeRS::kMidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckMatchDistributeRS::CheckMatchDistributeRS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGServer.CheckMatchDistributeRS)
}
CheckMatchDistributeRS::CheckMatchDistributeRS(const CheckMatchDistributeRS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mids_(from.mids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sid_, &from.sid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&sid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CPGServer.CheckMatchDistributeRS)
}

void CheckMatchDistributeRS::SharedCtor() {
  ::memset(&sid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&sid_)) + sizeof(result_));
}

CheckMatchDistributeRS::~CheckMatchDistributeRS() {
  // @@protoc_insertion_point(destructor:CPGServer.CheckMatchDistributeRS)
  SharedDtor();
}

void CheckMatchDistributeRS::SharedDtor() {
}

void CheckMatchDistributeRS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckMatchDistributeRS& CheckMatchDistributeRS::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CheckMatchDistributeRS_CPGServer_2eproto.base);
  return *internal_default_instance();
}


void CheckMatchDistributeRS::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGServer.CheckMatchDistributeRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mids_.Clear();
  ::memset(&sid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&sid_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckMatchDistributeRS::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CheckMatchDistributeRS*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 sid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_sid(value);
        break;
      }
      // int32 type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_type(value);
        break;
      }
      // int32 result = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_result(value);
        break;
      }
      // repeated int32 mids = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 34) {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_mids();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val;
          ptr = Varint::Parse64(ptr, &val);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ::google::protobuf::int32 value = val;
          msg->add_mids(value);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckMatchDistributeRS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGServer.CheckMatchDistributeRS)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 mids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_mids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGServer.CheckMatchDistributeRS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGServer.CheckMatchDistributeRS)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckMatchDistributeRS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGServer.CheckMatchDistributeRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sid = 1;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // int32 result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // repeated int32 mids = 4;
  if (this->mids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_mids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->mids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->mids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGServer.CheckMatchDistributeRS)
}

::google::protobuf::uint8* CheckMatchDistributeRS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGServer.CheckMatchDistributeRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sid = 1;
  if (this->sid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // int32 result = 3;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // repeated int32 mids = 4;
  if (this->mids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _mids_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->mids_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGServer.CheckMatchDistributeRS)
  return target;
}

size_t CheckMatchDistributeRS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGServer.CheckMatchDistributeRS)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 mids = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->mids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _mids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 sid = 1;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckMatchDistributeRS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGServer.CheckMatchDistributeRS)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckMatchDistributeRS* source =
      ::google::protobuf::DynamicCastToGenerated<CheckMatchDistributeRS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGServer.CheckMatchDistributeRS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGServer.CheckMatchDistributeRS)
    MergeFrom(*source);
  }
}

void CheckMatchDistributeRS::MergeFrom(const CheckMatchDistributeRS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGServer.CheckMatchDistributeRS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mids_.MergeFrom(from.mids_);
  if (from.sid() != 0) {
    set_sid(from.sid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void CheckMatchDistributeRS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGServer.CheckMatchDistributeRS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckMatchDistributeRS::CopyFrom(const CheckMatchDistributeRS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGServer.CheckMatchDistributeRS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckMatchDistributeRS::IsInitialized() const {
  return true;
}

void CheckMatchDistributeRS::Swap(CheckMatchDistributeRS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckMatchDistributeRS::InternalSwap(CheckMatchDistributeRS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  mids_.InternalSwap(&other->mids_);
  swap(sid_, other->sid_);
  swap(type_, other->type_);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CheckMatchDistributeRS::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGServer_2eproto);
  return ::file_level_metadata_CPGServer_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CancelMatchRQ::InitAsDefaultInstance() {
}
class CancelMatchRQ::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CancelMatchRQ::kMidFieldNumber;
const int CancelMatchRQ::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CancelMatchRQ::CancelMatchRQ()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGServer.CancelMatchRQ)
}
CancelMatchRQ::CancelMatchRQ(const CancelMatchRQ& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mid_, &from.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&mid_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:CPGServer.CancelMatchRQ)
}

void CancelMatchRQ::SharedCtor() {
  ::memset(&mid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&mid_)) + sizeof(reason_));
}

CancelMatchRQ::~CancelMatchRQ() {
  // @@protoc_insertion_point(destructor:CPGServer.CancelMatchRQ)
  SharedDtor();
}

void CancelMatchRQ::SharedDtor() {
}

void CancelMatchRQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelMatchRQ& CancelMatchRQ::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CancelMatchRQ_CPGServer_2eproto.base);
  return *internal_default_instance();
}


void CancelMatchRQ::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGServer.CancelMatchRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&mid_)) + sizeof(reason_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CancelMatchRQ::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CancelMatchRQ*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 mid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_mid(value);
        break;
      }
      // int32 reason = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_reason(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CancelMatchRQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGServer.CancelMatchRQ)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 mid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGServer.CancelMatchRQ)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGServer.CancelMatchRQ)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CancelMatchRQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGServer.CancelMatchRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mid(), output);
  }

  // int32 reason = 2;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGServer.CancelMatchRQ)
}

::google::protobuf::uint8* CancelMatchRQ::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGServer.CancelMatchRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mid = 1;
  if (this->mid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mid(), target);
  }

  // int32 reason = 2;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGServer.CancelMatchRQ)
  return target;
}

size_t CancelMatchRQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGServer.CancelMatchRQ)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mid());
  }

  // int32 reason = 2;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelMatchRQ::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGServer.CancelMatchRQ)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelMatchRQ* source =
      ::google::protobuf::DynamicCastToGenerated<CancelMatchRQ>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGServer.CancelMatchRQ)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGServer.CancelMatchRQ)
    MergeFrom(*source);
  }
}

void CancelMatchRQ::MergeFrom(const CancelMatchRQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGServer.CancelMatchRQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void CancelMatchRQ::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGServer.CancelMatchRQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelMatchRQ::CopyFrom(const CancelMatchRQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGServer.CancelMatchRQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelMatchRQ::IsInitialized() const {
  return true;
}

void CancelMatchRQ::Swap(CancelMatchRQ* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CancelMatchRQ::InternalSwap(CancelMatchRQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mid_, other->mid_);
  swap(reason_, other->reason_);
}

::google::protobuf::Metadata CancelMatchRQ::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGServer_2eproto);
  return ::file_level_metadata_CPGServer_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CancelMatchRS::InitAsDefaultInstance() {
}
class CancelMatchRS::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CancelMatchRS::kMidFieldNumber;
const int CancelMatchRS::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CancelMatchRS::CancelMatchRS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGServer.CancelMatchRS)
}
CancelMatchRS::CancelMatchRS(const CancelMatchRS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mid_, &from.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&mid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CPGServer.CancelMatchRS)
}

void CancelMatchRS::SharedCtor() {
  ::memset(&mid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&mid_)) + sizeof(result_));
}

CancelMatchRS::~CancelMatchRS() {
  // @@protoc_insertion_point(destructor:CPGServer.CancelMatchRS)
  SharedDtor();
}

void CancelMatchRS::SharedDtor() {
}

void CancelMatchRS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelMatchRS& CancelMatchRS::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CancelMatchRS_CPGServer_2eproto.base);
  return *internal_default_instance();
}


void CancelMatchRS::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGServer.CancelMatchRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&mid_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CancelMatchRS::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CancelMatchRS*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 mid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_mid(value);
        break;
      }
      // int32 result = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_result(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CancelMatchRS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGServer.CancelMatchRS)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 mid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGServer.CancelMatchRS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGServer.CancelMatchRS)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CancelMatchRS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGServer.CancelMatchRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mid(), output);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGServer.CancelMatchRS)
}

::google::protobuf::uint8* CancelMatchRS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGServer.CancelMatchRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mid = 1;
  if (this->mid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mid(), target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGServer.CancelMatchRS)
  return target;
}

size_t CancelMatchRS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGServer.CancelMatchRS)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mid());
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelMatchRS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGServer.CancelMatchRS)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelMatchRS* source =
      ::google::protobuf::DynamicCastToGenerated<CancelMatchRS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGServer.CancelMatchRS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGServer.CancelMatchRS)
    MergeFrom(*source);
  }
}

void CancelMatchRS::MergeFrom(const CancelMatchRS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGServer.CancelMatchRS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void CancelMatchRS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGServer.CancelMatchRS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelMatchRS::CopyFrom(const CancelMatchRS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGServer.CancelMatchRS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelMatchRS::IsInitialized() const {
  return true;
}

void CancelMatchRS::Swap(CancelMatchRS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CancelMatchRS::InternalSwap(CancelMatchRS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mid_, other->mid_);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CancelMatchRS::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGServer_2eproto);
  return ::file_level_metadata_CPGServer_2eproto[kIndexInFileMessages];
}


// ===================================================================

UpdateMatchRQ_PropertiesEntry_DoNotUse::UpdateMatchRQ_PropertiesEntry_DoNotUse() {}
UpdateMatchRQ_PropertiesEntry_DoNotUse::UpdateMatchRQ_PropertiesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void UpdateMatchRQ_PropertiesEntry_DoNotUse::MergeFrom(const UpdateMatchRQ_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata UpdateMatchRQ_PropertiesEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGServer_2eproto);
  return ::file_level_metadata_CPGServer_2eproto[13];
}
void UpdateMatchRQ_PropertiesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateMatchRQ_PropertiesEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      UpdateMatchRQ_PropertiesEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "CPGServer.UpdateMatchRQ.PropertiesEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "CPGServer.UpdateMatchRQ.PropertiesEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void UpdateMatchRQ::InitAsDefaultInstance() {
}
class UpdateMatchRQ::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateMatchRQ::kMidFieldNumber;
const int UpdateMatchRQ::kPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateMatchRQ::UpdateMatchRQ()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGServer.UpdateMatchRQ)
}
UpdateMatchRQ::UpdateMatchRQ(const UpdateMatchRQ& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  mid_ = from.mid_;
  // @@protoc_insertion_point(copy_constructor:CPGServer.UpdateMatchRQ)
}

void UpdateMatchRQ::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateMatchRQ_CPGServer_2eproto.base);
  mid_ = 0;
}

UpdateMatchRQ::~UpdateMatchRQ() {
  // @@protoc_insertion_point(destructor:CPGServer.UpdateMatchRQ)
  SharedDtor();
}

void UpdateMatchRQ::SharedDtor() {
}

void UpdateMatchRQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateMatchRQ& UpdateMatchRQ::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateMatchRQ_CPGServer_2eproto.base);
  return *internal_default_instance();
}


void UpdateMatchRQ::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGServer.UpdateMatchRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  mid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateMatchRQ::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateMatchRQ*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 mid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_mid(value);
        break;
      }
      // map<string, string> properties = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::CPGServer::UpdateMatchRQ_PropertiesEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->properties_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateMatchRQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGServer.UpdateMatchRQ)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 mid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> properties = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          UpdateMatchRQ_PropertiesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              UpdateMatchRQ_PropertiesEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&properties_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CPGServer.UpdateMatchRQ.PropertiesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CPGServer.UpdateMatchRQ.PropertiesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGServer.UpdateMatchRQ)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGServer.UpdateMatchRQ)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateMatchRQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGServer.UpdateMatchRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mid(), output);
  }

  // map<string, string> properties = 2;
  if (!this->properties().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CPGServer.UpdateMatchRQ.PropertiesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CPGServer.UpdateMatchRQ.PropertiesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->properties().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<UpdateMatchRQ_PropertiesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(properties_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<UpdateMatchRQ_PropertiesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        entry.reset(properties_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGServer.UpdateMatchRQ)
}

::google::protobuf::uint8* UpdateMatchRQ::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGServer.UpdateMatchRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mid = 1;
  if (this->mid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mid(), target);
  }

  // map<string, string> properties = 2;
  if (!this->properties().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CPGServer.UpdateMatchRQ.PropertiesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CPGServer.UpdateMatchRQ.PropertiesEntry.value");
      }
    };

    if (deterministic &&
        this->properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->properties().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<UpdateMatchRQ_PropertiesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(properties_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, deterministic, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<UpdateMatchRQ_PropertiesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        entry.reset(properties_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, deterministic, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGServer.UpdateMatchRQ)
  return target;
}

size_t UpdateMatchRQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGServer.UpdateMatchRQ)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> properties = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->properties_size());
  {
    ::std::unique_ptr<UpdateMatchRQ_PropertiesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->properties().begin();
        it != this->properties().end(); ++it) {
      entry.reset(properties_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // int32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateMatchRQ::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGServer.UpdateMatchRQ)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateMatchRQ* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateMatchRQ>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGServer.UpdateMatchRQ)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGServer.UpdateMatchRQ)
    MergeFrom(*source);
  }
}

void UpdateMatchRQ::MergeFrom(const UpdateMatchRQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGServer.UpdateMatchRQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
}

void UpdateMatchRQ::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGServer.UpdateMatchRQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMatchRQ::CopyFrom(const UpdateMatchRQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGServer.UpdateMatchRQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMatchRQ::IsInitialized() const {
  return true;
}

void UpdateMatchRQ::Swap(UpdateMatchRQ* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateMatchRQ::InternalSwap(UpdateMatchRQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  properties_.Swap(&other->properties_);
  swap(mid_, other->mid_);
}

::google::protobuf::Metadata UpdateMatchRQ::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGServer_2eproto);
  return ::file_level_metadata_CPGServer_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateMatchRS::InitAsDefaultInstance() {
}
class UpdateMatchRS::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateMatchRS::kMidFieldNumber;
const int UpdateMatchRS::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateMatchRS::UpdateMatchRS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGServer.UpdateMatchRS)
}
UpdateMatchRS::UpdateMatchRS(const UpdateMatchRS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mid_, &from.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&mid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CPGServer.UpdateMatchRS)
}

void UpdateMatchRS::SharedCtor() {
  ::memset(&mid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&mid_)) + sizeof(result_));
}

UpdateMatchRS::~UpdateMatchRS() {
  // @@protoc_insertion_point(destructor:CPGServer.UpdateMatchRS)
  SharedDtor();
}

void UpdateMatchRS::SharedDtor() {
}

void UpdateMatchRS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateMatchRS& UpdateMatchRS::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateMatchRS_CPGServer_2eproto.base);
  return *internal_default_instance();
}


void UpdateMatchRS::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGServer.UpdateMatchRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&mid_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateMatchRS::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateMatchRS*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 mid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_mid(value);
        break;
      }
      // int32 result = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_result(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateMatchRS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGServer.UpdateMatchRS)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 mid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGServer.UpdateMatchRS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGServer.UpdateMatchRS)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateMatchRS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGServer.UpdateMatchRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mid(), output);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGServer.UpdateMatchRS)
}

::google::protobuf::uint8* UpdateMatchRS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGServer.UpdateMatchRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mid = 1;
  if (this->mid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mid(), target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGServer.UpdateMatchRS)
  return target;
}

size_t UpdateMatchRS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGServer.UpdateMatchRS)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mid());
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateMatchRS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGServer.UpdateMatchRS)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateMatchRS* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateMatchRS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGServer.UpdateMatchRS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGServer.UpdateMatchRS)
    MergeFrom(*source);
  }
}

void UpdateMatchRS::MergeFrom(const UpdateMatchRS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGServer.UpdateMatchRS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void UpdateMatchRS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGServer.UpdateMatchRS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMatchRS::CopyFrom(const UpdateMatchRS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGServer.UpdateMatchRS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMatchRS::IsInitialized() const {
  return true;
}

void UpdateMatchRS::Swap(UpdateMatchRS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateMatchRS::InternalSwap(UpdateMatchRS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mid_, other->mid_);
  swap(result_, other->result_);
}

::google::protobuf::Metadata UpdateMatchRS::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGServer_2eproto);
  return ::file_level_metadata_CPGServer_2eproto[kIndexInFileMessages];
}


// ===================================================================

CreateMatchRQ_PropertiesEntry_DoNotUse::CreateMatchRQ_PropertiesEntry_DoNotUse() {}
CreateMatchRQ_PropertiesEntry_DoNotUse::CreateMatchRQ_PropertiesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void CreateMatchRQ_PropertiesEntry_DoNotUse::MergeFrom(const CreateMatchRQ_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata CreateMatchRQ_PropertiesEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGServer_2eproto);
  return ::file_level_metadata_CPGServer_2eproto[16];
}
void CreateMatchRQ_PropertiesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateMatchRQ_PropertiesEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      CreateMatchRQ_PropertiesEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "CPGServer.CreateMatchRQ.PropertiesEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "CPGServer.CreateMatchRQ.PropertiesEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void CreateMatchRQ::InitAsDefaultInstance() {
}
class CreateMatchRQ::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateMatchRQ::kPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateMatchRQ::CreateMatchRQ()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGServer.CreateMatchRQ)
}
CreateMatchRQ::CreateMatchRQ(const CreateMatchRQ& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  // @@protoc_insertion_point(copy_constructor:CPGServer.CreateMatchRQ)
}

void CreateMatchRQ::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateMatchRQ_CPGServer_2eproto.base);
}

CreateMatchRQ::~CreateMatchRQ() {
  // @@protoc_insertion_point(destructor:CPGServer.CreateMatchRQ)
  SharedDtor();
}

void CreateMatchRQ::SharedDtor() {
}

void CreateMatchRQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateMatchRQ& CreateMatchRQ::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateMatchRQ_CPGServer_2eproto.base);
  return *internal_default_instance();
}


void CreateMatchRQ::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGServer.CreateMatchRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateMatchRQ::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateMatchRQ*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // map<string, string> properties = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::CPGServer::CreateMatchRQ_PropertiesEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->properties_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateMatchRQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGServer.CreateMatchRQ)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> properties = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          CreateMatchRQ_PropertiesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              CreateMatchRQ_PropertiesEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&properties_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CPGServer.CreateMatchRQ.PropertiesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CPGServer.CreateMatchRQ.PropertiesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGServer.CreateMatchRQ)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGServer.CreateMatchRQ)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateMatchRQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGServer.CreateMatchRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> properties = 1;
  if (!this->properties().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CPGServer.CreateMatchRQ.PropertiesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CPGServer.CreateMatchRQ.PropertiesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->properties().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CreateMatchRQ_PropertiesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(properties_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<CreateMatchRQ_PropertiesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        entry.reset(properties_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGServer.CreateMatchRQ)
}

::google::protobuf::uint8* CreateMatchRQ::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGServer.CreateMatchRQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> properties = 1;
  if (!this->properties().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CPGServer.CreateMatchRQ.PropertiesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CPGServer.CreateMatchRQ.PropertiesEntry.value");
      }
    };

    if (deterministic &&
        this->properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->properties().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CreateMatchRQ_PropertiesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(properties_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, deterministic, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<CreateMatchRQ_PropertiesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        entry.reset(properties_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, deterministic, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGServer.CreateMatchRQ)
  return target;
}

size_t CreateMatchRQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGServer.CreateMatchRQ)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> properties = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->properties_size());
  {
    ::std::unique_ptr<CreateMatchRQ_PropertiesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->properties().begin();
        it != this->properties().end(); ++it) {
      entry.reset(properties_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateMatchRQ::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGServer.CreateMatchRQ)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateMatchRQ* source =
      ::google::protobuf::DynamicCastToGenerated<CreateMatchRQ>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGServer.CreateMatchRQ)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGServer.CreateMatchRQ)
    MergeFrom(*source);
  }
}

void CreateMatchRQ::MergeFrom(const CreateMatchRQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGServer.CreateMatchRQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
}

void CreateMatchRQ::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGServer.CreateMatchRQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateMatchRQ::CopyFrom(const CreateMatchRQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGServer.CreateMatchRQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMatchRQ::IsInitialized() const {
  return true;
}

void CreateMatchRQ::Swap(CreateMatchRQ* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateMatchRQ::InternalSwap(CreateMatchRQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  properties_.Swap(&other->properties_);
}

::google::protobuf::Metadata CreateMatchRQ::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGServer_2eproto);
  return ::file_level_metadata_CPGServer_2eproto[kIndexInFileMessages];
}


// ===================================================================

CreateMatchRS_PropertiesEntry_DoNotUse::CreateMatchRS_PropertiesEntry_DoNotUse() {}
CreateMatchRS_PropertiesEntry_DoNotUse::CreateMatchRS_PropertiesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void CreateMatchRS_PropertiesEntry_DoNotUse::MergeFrom(const CreateMatchRS_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata CreateMatchRS_PropertiesEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGServer_2eproto);
  return ::file_level_metadata_CPGServer_2eproto[18];
}
void CreateMatchRS_PropertiesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateMatchRS_PropertiesEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      CreateMatchRS_PropertiesEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "CPGServer.CreateMatchRS.PropertiesEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "CPGServer.CreateMatchRS.PropertiesEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void CreateMatchRS::InitAsDefaultInstance() {
}
class CreateMatchRS::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateMatchRS::kPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateMatchRS::CreateMatchRS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPGServer.CreateMatchRS)
}
CreateMatchRS::CreateMatchRS(const CreateMatchRS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  // @@protoc_insertion_point(copy_constructor:CPGServer.CreateMatchRS)
}

void CreateMatchRS::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateMatchRS_CPGServer_2eproto.base);
}

CreateMatchRS::~CreateMatchRS() {
  // @@protoc_insertion_point(destructor:CPGServer.CreateMatchRS)
  SharedDtor();
}

void CreateMatchRS::SharedDtor() {
}

void CreateMatchRS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateMatchRS& CreateMatchRS::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateMatchRS_CPGServer_2eproto.base);
  return *internal_default_instance();
}


void CreateMatchRS::Clear() {
// @@protoc_insertion_point(message_clear_start:CPGServer.CreateMatchRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateMatchRS::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateMatchRS*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // map<string, string> properties = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::CPGServer::CreateMatchRS_PropertiesEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->properties_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateMatchRS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPGServer.CreateMatchRS)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> properties = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          CreateMatchRS_PropertiesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              CreateMatchRS_PropertiesEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&properties_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CPGServer.CreateMatchRS.PropertiesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CPGServer.CreateMatchRS.PropertiesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPGServer.CreateMatchRS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPGServer.CreateMatchRS)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateMatchRS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPGServer.CreateMatchRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> properties = 1;
  if (!this->properties().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CPGServer.CreateMatchRS.PropertiesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CPGServer.CreateMatchRS.PropertiesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->properties().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CreateMatchRS_PropertiesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(properties_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<CreateMatchRS_PropertiesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        entry.reset(properties_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPGServer.CreateMatchRS)
}

::google::protobuf::uint8* CreateMatchRS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPGServer.CreateMatchRS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> properties = 1;
  if (!this->properties().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CPGServer.CreateMatchRS.PropertiesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CPGServer.CreateMatchRS.PropertiesEntry.value");
      }
    };

    if (deterministic &&
        this->properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->properties().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CreateMatchRS_PropertiesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(properties_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, deterministic, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<CreateMatchRS_PropertiesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        entry.reset(properties_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, deterministic, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPGServer.CreateMatchRS)
  return target;
}

size_t CreateMatchRS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPGServer.CreateMatchRS)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> properties = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->properties_size());
  {
    ::std::unique_ptr<CreateMatchRS_PropertiesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->properties().begin();
        it != this->properties().end(); ++it) {
      entry.reset(properties_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateMatchRS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPGServer.CreateMatchRS)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateMatchRS* source =
      ::google::protobuf::DynamicCastToGenerated<CreateMatchRS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPGServer.CreateMatchRS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPGServer.CreateMatchRS)
    MergeFrom(*source);
  }
}

void CreateMatchRS::MergeFrom(const CreateMatchRS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPGServer.CreateMatchRS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
}

void CreateMatchRS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPGServer.CreateMatchRS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateMatchRS::CopyFrom(const CreateMatchRS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPGServer.CreateMatchRS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMatchRS::IsInitialized() const {
  return true;
}

void CreateMatchRS::Swap(CreateMatchRS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateMatchRS::InternalSwap(CreateMatchRS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  properties_.Swap(&other->properties_);
}

::google::protobuf::Metadata CreateMatchRS::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CPGServer_2eproto);
  return ::file_level_metadata_CPGServer_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CPGServer
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::CPGServer::ServerInfo* Arena::CreateMaybeMessage< ::CPGServer::ServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::CPGServer::ServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGServer::ServerRegisterRQ* Arena::CreateMaybeMessage< ::CPGServer::ServerRegisterRQ >(Arena* arena) {
  return Arena::CreateInternal< ::CPGServer::ServerRegisterRQ >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGServer::ServerRegisterRS* Arena::CreateMaybeMessage< ::CPGServer::ServerRegisterRS >(Arena* arena) {
  return Arena::CreateInternal< ::CPGServer::ServerRegisterRS >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGServer::NewConnServiceNotify* Arena::CreateMaybeMessage< ::CPGServer::NewConnServiceNotify >(Arena* arena) {
  return Arena::CreateInternal< ::CPGServer::NewConnServiceNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGServer::GateServerInfo* Arena::CreateMaybeMessage< ::CPGServer::GateServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::CPGServer::GateServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGServer::ServerLoginRQ* Arena::CreateMaybeMessage< ::CPGServer::ServerLoginRQ >(Arena* arena) {
  return Arena::CreateInternal< ::CPGServer::ServerLoginRQ >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGServer::ServerLoginRS* Arena::CreateMaybeMessage< ::CPGServer::ServerLoginRS >(Arena* arena) {
  return Arena::CreateInternal< ::CPGServer::ServerLoginRS >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGServer::ServiceMatchDistibuteNotify* Arena::CreateMaybeMessage< ::CPGServer::ServiceMatchDistibuteNotify >(Arena* arena) {
  return Arena::CreateInternal< ::CPGServer::ServiceMatchDistibuteNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGServer::ServerAllMatchDistributeNotify* Arena::CreateMaybeMessage< ::CPGServer::ServerAllMatchDistributeNotify >(Arena* arena) {
  return Arena::CreateInternal< ::CPGServer::ServerAllMatchDistributeNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGServer::CheckMatchDistributeRQ* Arena::CreateMaybeMessage< ::CPGServer::CheckMatchDistributeRQ >(Arena* arena) {
  return Arena::CreateInternal< ::CPGServer::CheckMatchDistributeRQ >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGServer::CheckMatchDistributeRS* Arena::CreateMaybeMessage< ::CPGServer::CheckMatchDistributeRS >(Arena* arena) {
  return Arena::CreateInternal< ::CPGServer::CheckMatchDistributeRS >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGServer::CancelMatchRQ* Arena::CreateMaybeMessage< ::CPGServer::CancelMatchRQ >(Arena* arena) {
  return Arena::CreateInternal< ::CPGServer::CancelMatchRQ >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGServer::CancelMatchRS* Arena::CreateMaybeMessage< ::CPGServer::CancelMatchRS >(Arena* arena) {
  return Arena::CreateInternal< ::CPGServer::CancelMatchRS >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGServer::UpdateMatchRQ_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::CPGServer::UpdateMatchRQ_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::CPGServer::UpdateMatchRQ_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGServer::UpdateMatchRQ* Arena::CreateMaybeMessage< ::CPGServer::UpdateMatchRQ >(Arena* arena) {
  return Arena::CreateInternal< ::CPGServer::UpdateMatchRQ >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGServer::UpdateMatchRS* Arena::CreateMaybeMessage< ::CPGServer::UpdateMatchRS >(Arena* arena) {
  return Arena::CreateInternal< ::CPGServer::UpdateMatchRS >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGServer::CreateMatchRQ_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::CPGServer::CreateMatchRQ_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::CPGServer::CreateMatchRQ_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGServer::CreateMatchRQ* Arena::CreateMaybeMessage< ::CPGServer::CreateMatchRQ >(Arena* arena) {
  return Arena::CreateInternal< ::CPGServer::CreateMatchRQ >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGServer::CreateMatchRS_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::CPGServer::CreateMatchRS_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::CPGServer::CreateMatchRS_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::CPGServer::CreateMatchRS* Arena::CreateMaybeMessage< ::CPGServer::CreateMatchRS >(Arena* arena) {
  return Arena::CreateInternal< ::CPGServer::CreateMatchRS >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
