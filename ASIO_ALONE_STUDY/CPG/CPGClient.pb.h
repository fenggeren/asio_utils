// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CPGClient.proto

#ifndef PROTOBUF_INCLUDED_CPGClient_2eproto
#define PROTOBUF_INCLUDED_CPGClient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CPGClient_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_CPGClient_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_CPGClient_2eproto();
namespace CPGClient {
class ConnectGateRQ;
class ConnectGateRQDefaultTypeInternal;
extern ConnectGateRQDefaultTypeInternal _ConnectGateRQ_default_instance_;
class ConnectGateRS;
class ConnectGateRSDefaultTypeInternal;
extern ConnectGateRSDefaultTypeInternal _ConnectGateRS_default_instance_;
class LoginRQ;
class LoginRQDefaultTypeInternal;
extern LoginRQDefaultTypeInternal _LoginRQ_default_instance_;
class LoginRS;
class LoginRSDefaultTypeInternal;
extern LoginRSDefaultTypeInternal _LoginRS_default_instance_;
}  // namespace CPGClient
namespace google {
namespace protobuf {
template<> ::CPGClient::ConnectGateRQ* Arena::CreateMaybeMessage<::CPGClient::ConnectGateRQ>(Arena*);
template<> ::CPGClient::ConnectGateRS* Arena::CreateMaybeMessage<::CPGClient::ConnectGateRS>(Arena*);
template<> ::CPGClient::LoginRQ* Arena::CreateMaybeMessage<::CPGClient::LoginRQ>(Arena*);
template<> ::CPGClient::LoginRS* Arena::CreateMaybeMessage<::CPGClient::LoginRS>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CPGClient {

// ===================================================================

class ConnectGateRQ : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CPGClient.ConnectGateRQ) */ {
 public:
  ConnectGateRQ();
  virtual ~ConnectGateRQ();

  ConnectGateRQ(const ConnectGateRQ& from);

  inline ConnectGateRQ& operator=(const ConnectGateRQ& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectGateRQ(ConnectGateRQ&& from) noexcept
    : ConnectGateRQ() {
    *this = ::std::move(from);
  }

  inline ConnectGateRQ& operator=(ConnectGateRQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ConnectGateRQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectGateRQ* internal_default_instance() {
    return reinterpret_cast<const ConnectGateRQ*>(
               &_ConnectGateRQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ConnectGateRQ* other);
  friend void swap(ConnectGateRQ& a, ConnectGateRQ& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectGateRQ* New() const final {
    return CreateMaybeMessage<ConnectGateRQ>(NULL);
  }

  ConnectGateRQ* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConnectGateRQ>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConnectGateRQ& from);
  void MergeFrom(const ConnectGateRQ& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectGateRQ* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPGClient.ConnectGateRQ)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CPGClient_2eproto;
};
// -------------------------------------------------------------------

class ConnectGateRS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CPGClient.ConnectGateRS) */ {
 public:
  ConnectGateRS();
  virtual ~ConnectGateRS();

  ConnectGateRS(const ConnectGateRS& from);

  inline ConnectGateRS& operator=(const ConnectGateRS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectGateRS(ConnectGateRS&& from) noexcept
    : ConnectGateRS() {
    *this = ::std::move(from);
  }

  inline ConnectGateRS& operator=(ConnectGateRS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ConnectGateRS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectGateRS* internal_default_instance() {
    return reinterpret_cast<const ConnectGateRS*>(
               &_ConnectGateRS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ConnectGateRS* other);
  friend void swap(ConnectGateRS& a, ConnectGateRS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectGateRS* New() const final {
    return CreateMaybeMessage<ConnectGateRS>(NULL);
  }

  ConnectGateRS* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConnectGateRS>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConnectGateRS& from);
  void MergeFrom(const ConnectGateRS& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectGateRS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip = 3;
  void clear_ip();
  static const int kIpFieldNumber = 3;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // int32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CPGClient.ConnectGateRS)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CPGClient_2eproto;
};
// -------------------------------------------------------------------

class LoginRS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CPGClient.LoginRS) */ {
 public:
  LoginRS();
  virtual ~LoginRS();

  LoginRS(const LoginRS& from);

  inline LoginRS& operator=(const LoginRS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRS(LoginRS&& from) noexcept
    : LoginRS() {
    *this = ::std::move(from);
  }

  inline LoginRS& operator=(LoginRS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoginRS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRS* internal_default_instance() {
    return reinterpret_cast<const LoginRS*>(
               &_LoginRS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LoginRS* other);
  friend void swap(LoginRS& a, LoginRS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRS* New() const final {
    return CreateMaybeMessage<LoginRS>(NULL);
  }

  LoginRS* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginRS>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginRS& from);
  void MergeFrom(const LoginRS& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // int32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int32 uid() const;
  void set_uid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CPGClient.LoginRS)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::int32 uid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CPGClient_2eproto;
};
// -------------------------------------------------------------------

class LoginRQ : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CPGClient.LoginRQ) */ {
 public:
  LoginRQ();
  virtual ~LoginRQ();

  LoginRQ(const LoginRQ& from);

  inline LoginRQ& operator=(const LoginRQ& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRQ(LoginRQ&& from) noexcept
    : LoginRQ() {
    *this = ::std::move(from);
  }

  inline LoginRQ& operator=(LoginRQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoginRQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRQ* internal_default_instance() {
    return reinterpret_cast<const LoginRQ*>(
               &_LoginRQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LoginRQ* other);
  friend void swap(LoginRQ& a, LoginRQ& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRQ* New() const final {
    return CreateMaybeMessage<LoginRQ>(NULL);
  }

  LoginRQ* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginRQ>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginRQ& from);
  void MergeFrom(const LoginRQ& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRQ* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CPGClient.LoginRQ)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CPGClient_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConnectGateRQ

// -------------------------------------------------------------------

// ConnectGateRS

// int32 result = 1;
inline void ConnectGateRS::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 ConnectGateRS::result() const {
  // @@protoc_insertion_point(field_get:CPGClient.ConnectGateRS.result)
  return result_;
}
inline void ConnectGateRS::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:CPGClient.ConnectGateRS.result)
}

// int32 port = 2;
inline void ConnectGateRS::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 ConnectGateRS::port() const {
  // @@protoc_insertion_point(field_get:CPGClient.ConnectGateRS.port)
  return port_;
}
inline void ConnectGateRS::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:CPGClient.ConnectGateRS.port)
}

// string ip = 3;
inline void ConnectGateRS::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectGateRS::ip() const {
  // @@protoc_insertion_point(field_get:CPGClient.ConnectGateRS.ip)
  return ip_.GetNoArena();
}
inline void ConnectGateRS::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CPGClient.ConnectGateRS.ip)
}
#if LANG_CXX11
inline void ConnectGateRS::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CPGClient.ConnectGateRS.ip)
}
#endif
inline void ConnectGateRS::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CPGClient.ConnectGateRS.ip)
}
inline void ConnectGateRS::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CPGClient.ConnectGateRS.ip)
}
inline ::std::string* ConnectGateRS::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:CPGClient.ConnectGateRS.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectGateRS::release_ip() {
  // @@protoc_insertion_point(field_release:CPGClient.ConnectGateRS.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectGateRS::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:CPGClient.ConnectGateRS.ip)
}

// -------------------------------------------------------------------

// LoginRS

// int32 uid = 1;
inline void LoginRS::clear_uid() {
  uid_ = 0;
}
inline ::google::protobuf::int32 LoginRS::uid() const {
  // @@protoc_insertion_point(field_get:CPGClient.LoginRS.uid)
  return uid_;
}
inline void LoginRS::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:CPGClient.LoginRS.uid)
}

// string token = 2;
inline void LoginRS::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRS::token() const {
  // @@protoc_insertion_point(field_get:CPGClient.LoginRS.token)
  return token_.GetNoArena();
}
inline void LoginRS::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CPGClient.LoginRS.token)
}
#if LANG_CXX11
inline void LoginRS::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CPGClient.LoginRS.token)
}
#endif
inline void LoginRS::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CPGClient.LoginRS.token)
}
inline void LoginRS::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CPGClient.LoginRS.token)
}
inline ::std::string* LoginRS::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:CPGClient.LoginRS.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRS::release_token() {
  // @@protoc_insertion_point(field_release:CPGClient.LoginRS.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRS::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:CPGClient.LoginRS.token)
}

// -------------------------------------------------------------------

// LoginRQ

// int32 result = 1;
inline void LoginRQ::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 LoginRQ::result() const {
  // @@protoc_insertion_point(field_get:CPGClient.LoginRQ.result)
  return result_;
}
inline void LoginRQ::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:CPGClient.LoginRQ.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CPGClient

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_CPGClient_2eproto
